{"ast":null,"code":"import * as i1 from 'rxjs';\nimport { Subject, of, Observable, ReplaySubject, combineLatest, fromEvent } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, InjectFlags, LOCALE_ID, Injectable, Inject, Component, ChangeDetectionStrategy, EventEmitter, Input, Output, HostBinding, ContentChildren, Optional, NgModule } from '@angular/core';\nimport { mergeMap, map, switchMap, debounceTime } from 'rxjs/operators';\nimport { __rest } from 'tslib'; /// <reference path=\"./types.ts\" />\n\nconst _c0 = [\"*\"];\nconst _c1 = \"[_nghost-%COMP%] { width: fit-content; display: block; }\";\n\nclass ChartEditorRef {\n  constructor(editor) {\n    this.editor = editor;\n    this.doneSubject = new Subject();\n    this.addEventListeners();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is saved.\n   * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n   */\n\n\n  afterClosed() {\n    return this.doneSubject.asObservable();\n  }\n  /**\n   * Stops editing the chart and closes the dialog.\n   */\n\n\n  cancel() {\n    this.editor.closeDialog();\n  }\n\n  addEventListeners() {\n    google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n      const updatedChartWrapper = this.editor.getChartWrapper();\n      this.doneSubject.next(updatedChartWrapper);\n      this.doneSubject.complete();\n    });\n    google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n      this.doneSubject.next(null);\n      this.doneSubject.complete();\n    });\n  }\n\n}\n\nvar ChartType;\n\n(function (ChartType) {\n  ChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n  ChartType[\"AreaChart\"] = \"AreaChart\";\n  ChartType[\"Bar\"] = \"Bar\";\n  ChartType[\"BarChart\"] = \"BarChart\";\n  ChartType[\"BubbleChart\"] = \"BubbleChart\";\n  ChartType[\"Calendar\"] = \"Calendar\";\n  ChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n  ChartType[\"ColumnChart\"] = \"ColumnChart\";\n  ChartType[\"ComboChart\"] = \"ComboChart\";\n  ChartType[\"PieChart\"] = \"PieChart\";\n  ChartType[\"Gantt\"] = \"Gantt\";\n  ChartType[\"Gauge\"] = \"Gauge\";\n  ChartType[\"GeoChart\"] = \"GeoChart\";\n  ChartType[\"Histogram\"] = \"Histogram\";\n  ChartType[\"Line\"] = \"Line\";\n  ChartType[\"LineChart\"] = \"LineChart\";\n  ChartType[\"Map\"] = \"Map\";\n  ChartType[\"OrgChart\"] = \"OrgChart\";\n  ChartType[\"Sankey\"] = \"Sankey\";\n  ChartType[\"Scatter\"] = \"Scatter\";\n  ChartType[\"ScatterChart\"] = \"ScatterChart\";\n  ChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n  ChartType[\"Table\"] = \"Table\";\n  ChartType[\"Timeline\"] = \"Timeline\";\n  ChartType[\"TreeMap\"] = \"TreeMap\";\n  ChartType[\"WordTree\"] = \"WordTree\";\n})(ChartType || (ChartType = {}));\n\nconst ChartTypesToPackages = {\n  [ChartType.AnnotationChart]: 'annotationchart',\n  [ChartType.AreaChart]: 'corechart',\n  [ChartType.Bar]: 'bar',\n  [ChartType.BarChart]: 'corechart',\n  [ChartType.BubbleChart]: 'corechart',\n  [ChartType.Calendar]: 'calendar',\n  [ChartType.CandlestickChart]: 'corechart',\n  [ChartType.ColumnChart]: 'corechart',\n  [ChartType.ComboChart]: 'corechart',\n  [ChartType.PieChart]: 'corechart',\n  [ChartType.Gantt]: 'gantt',\n  [ChartType.Gauge]: 'gauge',\n  [ChartType.GeoChart]: 'geochart',\n  [ChartType.Histogram]: 'corechart',\n  [ChartType.Line]: 'line',\n  [ChartType.LineChart]: 'corechart',\n  [ChartType.Map]: 'map',\n  [ChartType.OrgChart]: 'orgchart',\n  [ChartType.Sankey]: 'sankey',\n  [ChartType.Scatter]: 'scatter',\n  [ChartType.ScatterChart]: 'corechart',\n  [ChartType.SteppedAreaChart]: 'corechart',\n  [ChartType.Table]: 'table',\n  [ChartType.Timeline]: 'timeline',\n  [ChartType.TreeMap]: 'treemap',\n  [ChartType.WordTree]: 'wordtree'\n};\n\nfunction getPackageForChart(type) {\n  return ChartTypesToPackages[type];\n}\n\nfunction getDefaultConfig() {\n  return {\n    version: 'current',\n    safeMode: false\n  };\n}\n\nconst GOOGLE_CHARTS_CONFIG = new InjectionToken('GOOGLE_CHARTS_CONFIG');\nconst GOOGLE_CHARTS_LAZY_CONFIG = new InjectionToken('GOOGLE_CHARTS_LAZY_CONFIG', {\n  providedIn: 'root',\n  factory: () => {\n    const configFromModule = inject(GOOGLE_CHARTS_CONFIG, InjectFlags.Optional);\n    return of(Object.assign(Object.assign({}, getDefaultConfig()), configFromModule || {}));\n  }\n});\n\nclass ScriptLoaderService {\n  constructor(zone, localeId, config$) {\n    this.zone = zone;\n    this.localeId = localeId;\n    this.config$ = config$;\n    this.scriptSource = 'https://www.gstatic.com/charts/loader.js';\n    this.scriptLoadSubject = new Subject();\n  }\n  /**\n   * Checks whether `google.charts` is available.\n   *\n   * If not, it can be loaded by calling `loadChartPackages`.\n   *\n   * @returns `true` if `google.charts` is available, `false` otherwise.\n   */\n\n\n  isGoogleChartsAvailable() {\n    if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Loads the Google Chart script and the provided chart packages.\n   * Can be called multiple times to load more packages.\n   *\n   * When called without any arguments, this will just load the default package\n   * containing the namespaces `google.charts` and `google.visualization` without any charts.\n   *\n   * @param packages The packages to load.\n   * @returns A stream emitting as soon as the chart packages are loaded.\n   */\n\n\n  loadChartPackages(...packages) {\n    return this.loadGoogleCharts().pipe(mergeMap(() => this.config$), map(config => {\n      return Object.assign(Object.assign({}, getDefaultConfig()), config || {});\n    }), switchMap(googleChartsConfig => {\n      return new Observable(observer => {\n        const config = {\n          packages,\n          language: this.localeId,\n          mapsApiKey: googleChartsConfig.mapsApiKey,\n          safeMode: googleChartsConfig.safeMode\n        };\n        google.charts.load(googleChartsConfig.version, config);\n        google.charts.setOnLoadCallback(() => {\n          this.zone.run(() => {\n            observer.next();\n            observer.complete();\n          });\n        });\n      });\n    }));\n  }\n  /**\n   * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n   *\n   * @returns A stream emitting as soon as loading has completed.\n   * If the google charts script is already loaded, the stream emits immediately.\n   */\n\n\n  loadGoogleCharts() {\n    if (this.isGoogleChartsAvailable()) {\n      return of(undefined);\n    } else if (!this.isLoadingGoogleCharts()) {\n      const script = this.createGoogleChartsScript();\n\n      script.onload = () => {\n        this.zone.run(() => {\n          this.scriptLoadSubject.next();\n          this.scriptLoadSubject.complete();\n        });\n      };\n\n      script.onerror = () => {\n        this.zone.run(() => {\n          console.error('Failed to load the google charts script!');\n          this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n        });\n      };\n    }\n\n    return this.scriptLoadSubject.asObservable();\n  }\n\n  isLoadingGoogleCharts() {\n    return this.getGoogleChartsScript() != null;\n  }\n\n  getGoogleChartsScript() {\n    const pageScripts = Array.from(document.getElementsByTagName('script'));\n    return pageScripts.find(script => script.src === this.scriptSource);\n  }\n\n  createGoogleChartsScript() {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = this.scriptSource;\n    script.async = true;\n    document.getElementsByTagName('head')[0].appendChild(script);\n    return script;\n  }\n\n}\n\nScriptLoaderService.ɵfac = function ScriptLoaderService_Factory(t) {\n  return new (t || ScriptLoaderService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(LOCALE_ID), i0.ɵɵinject(GOOGLE_CHARTS_LAZY_CONFIG));\n};\n\nScriptLoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptLoaderService,\n  factory: ScriptLoaderService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptLoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: i1.Observable,\n      decorators: [{\n        type: Inject,\n        args: [GOOGLE_CHARTS_LAZY_CONFIG]\n      }]\n    }];\n  }, null);\n})(); /// <reference path=\"./types.ts\" />\n\n\nclass ChartEditorComponent {\n  constructor(scriptLoaderService) {\n    this.scriptLoaderService = scriptLoaderService;\n    this.initializedSubject = new Subject();\n  }\n  /**\n   * Emits as soon as the chart editor is fully initialized.\n   */\n\n\n  get initialized$() {\n    return this.initializedSubject.asObservable();\n  }\n\n  ngOnInit() {\n    this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n      this.editor = new google.visualization.ChartEditor();\n      this.initializedSubject.next(this.editor);\n      this.initializedSubject.complete();\n    });\n  }\n\n  editChart(component, options) {\n    if (!component.chartWrapper) {\n      throw new Error('Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n    }\n\n    if (!this.editor) {\n      throw new Error('Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n    }\n\n    const handle = new ChartEditorRef(this.editor);\n    this.editor.openDialog(component.chartWrapper, options || {});\n    handle.afterClosed().subscribe(result => {\n      if (result) {\n        component.chartWrapper = result;\n      }\n    });\n    return handle;\n  }\n\n}\n\nChartEditorComponent.ɵfac = function ChartEditorComponent_Factory(t) {\n  return new (t || ChartEditorComponent)(i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\n\nChartEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartEditorComponent,\n  selectors: [[\"chart-editor\"]],\n  hostAttrs: [1, \"chart-editor\"],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function ChartEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartEditorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'chart-editor',\n      template: `<ng-content></ng-content>`,\n      host: {\n        class: 'chart-editor'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ScriptLoaderService\n    }];\n  }, null);\n})();\n\nclass DataTableService {\n  create(data, columns, formatters) {\n    if (data == null) {\n      return undefined;\n    }\n\n    let firstRowIsData = true;\n\n    if (columns != null) {\n      firstRowIsData = false;\n    }\n\n    const dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(data, columns), firstRowIsData);\n\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n    }\n\n    return dataTable;\n  }\n\n  getDataAsTable(data, columns) {\n    if (columns) {\n      return [columns, ...data];\n    } else {\n      return data;\n    }\n  }\n\n  applyFormatters(dataTable, formatters) {\n    for (const val of formatters) {\n      val.formatter.format(dataTable, val.colIndex);\n    }\n  }\n\n}\n\nDataTableService.ɵfac = function DataTableService_Factory(t) {\n  return new (t || DataTableService)();\n};\n\nDataTableService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DataTableService,\n  factory: DataTableService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\n\n\nfunction generateRandomId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nvar FilterType;\n\n(function (FilterType) {\n  FilterType[\"Category\"] = \"CategoryFilter\";\n  FilterType[\"ChartRange\"] = \"ChartRangeFilter\";\n  FilterType[\"DateRange\"] = \"DateRangeFilter\";\n  FilterType[\"NumberRange\"] = \"NumberRangeFilter\";\n  FilterType[\"String\"] = \"StringFilter\";\n})(FilterType || (FilterType = {}));\n\nclass ControlWrapperComponent {\n  constructor(loaderService) {\n    this.loaderService = loaderService;\n    /**\n     * Emits when an error occurs when attempting to render the control.\n     */\n\n    this.error = new EventEmitter();\n    /**\n     * The control is ready to accept user interaction and for external method calls.\n     *\n     * Alternatively, you can listen for a ready event on the dashboard holding the control\n     * and call control methods only after the event was fired.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Emits when the user interacts with the control, affecting its state.\n     * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n     *\n     * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n     */\n\n    this.stateChange = new EventEmitter();\n    /**\n     * A generated id assigned to this components DOM element.\n     */\n\n    this.id = generateRandomId();\n    this.wrapperReadySubject = new ReplaySubject(1);\n  }\n  /**\n   * Emits after the `ControlWrapper` was created.\n   */\n\n\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  get controlWrapper() {\n    if (!this._controlWrapper) {\n      throw new Error(`Cannot access the control wrapper before it being initialized.`);\n    }\n\n    return this._controlWrapper;\n  }\n\n  ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createControlWrapper();\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (!this._controlWrapper) {\n      return;\n    }\n\n    if (changes.type) {\n      this._controlWrapper.setControlType(this.type);\n    }\n\n    if (changes.options) {\n      this._controlWrapper.setOptions(this.options || {});\n    }\n\n    if (changes.state) {\n      this._controlWrapper.setState(this.state || {});\n    }\n  }\n\n  createControlWrapper() {\n    this._controlWrapper = new google.visualization.ControlWrapper({\n      containerId: this.id,\n      controlType: this.type,\n      state: this.state,\n      options: this.options\n    });\n    this.addEventListeners();\n    this.wrapperReadySubject.next(this._controlWrapper);\n  }\n\n  addEventListeners() {\n    google.visualization.events.removeAllListeners(this._controlWrapper);\n    google.visualization.events.addListener(this._controlWrapper, 'ready', event => this.ready.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'error', event => this.error.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'statechange', event => this.stateChange.emit(event));\n  }\n\n}\n\nControlWrapperComponent.ɵfac = function ControlWrapperComponent_Factory(t) {\n  return new (t || ControlWrapperComponent)(i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\n\nControlWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ControlWrapperComponent,\n  selectors: [[\"control-wrapper\"]],\n  hostAttrs: [1, \"control-wrapper\"],\n  hostVars: 1,\n  hostBindings: function ControlWrapperComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    for: \"for\",\n    type: \"type\",\n    options: \"options\",\n    state: \"state\"\n  },\n  outputs: {\n    error: \"error\",\n    ready: \"ready\",\n    stateChange: \"stateChange\"\n  },\n  exportAs: [\"controlWrapper\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function ControlWrapperComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ControlWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'control-wrapper',\n      template: '',\n      host: {\n        class: 'control-wrapper'\n      },\n      exportAs: 'controlWrapper',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ScriptLoaderService\n    }];\n  }, {\n    for: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    stateChange: [{\n      type: Output\n    }],\n    id: [{\n      type: HostBinding,\n      args: ['id']\n    }]\n  });\n})();\n\nclass DashboardComponent {\n  constructor(element, loaderService, dataTableService) {\n    this.element = element;\n    this.loaderService = loaderService;\n    this.dataTableService = dataTableService;\n    /**\n     * The dashboard has completed drawing and is ready to accept changes.\n     *\n     * The ready event will also fire:\n     * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n     * - after redrawing any chart on the dashboard.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Emits when an error occurs when attempting to render the dashboard.\n     * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n     */\n\n    this.error = new EventEmitter();\n    this.initialized = false;\n  }\n\n  ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      this.createDashboard();\n      this.initialized = true;\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.data || changes.columns || changes.formatters) {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      this.dashboard.draw(this.dataTable);\n    }\n  }\n\n  createDashboard() {\n    // TODO: This should happen in the control wrapper\n    // However, I don't yet know how to do this because then `bind()` would get called multiple times\n    // for the same control if something changes. This is not supported by google charts as far as I can tell\n    // from their source code.\n    const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n    const chartsReady$ = this.controlWrappers.map(control => control.for).map(charts => {\n      if (Array.isArray(charts)) {\n        // CombineLatest waits for all observables\n        return combineLatest(charts.map(chart => chart.wrapperReady$));\n      } else {\n        return charts.wrapperReady$;\n      }\n    }); // We have to wait for all chart wrappers and control wrappers to be initialized\n    // before we can compose them together to create the dashboard\n\n    combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n      this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n      this.initializeBindings();\n      this.registerEvents();\n      this.dashboard.draw(this.dataTable);\n    });\n  }\n\n  registerEvents() {\n    google.visualization.events.removeAllListeners(this.dashboard);\n\n    const registerDashEvent = (object, eventName, callback) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerDashEvent(this.dashboard, 'ready', () => this.ready.emit());\n    registerDashEvent(this.dashboard, 'error', error => this.error.emit(error));\n  }\n\n  initializeBindings() {\n    this.controlWrappers.forEach(control => {\n      if (Array.isArray(control.for)) {\n        const chartWrappers = control.for.map(chart => chart.chartWrapper);\n        this.dashboard.bind(control.controlWrapper, chartWrappers);\n      } else {\n        this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n      }\n    });\n  }\n\n}\n\nDashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n  return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService), i0.ɵɵdirectiveInject(DataTableService));\n};\n\nDashboardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DashboardComponent,\n  selectors: [[\"dashboard\"]],\n  contentQueries: function DashboardComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, ControlWrapperComponent, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controlWrappers = _t);\n    }\n  },\n  hostAttrs: [1, \"dashboard\"],\n  inputs: {\n    data: \"data\",\n    columns: \"columns\",\n    formatters: \"formatters\"\n  },\n  outputs: {\n    ready: \"ready\",\n    error: \"error\"\n  },\n  exportAs: [\"dashboard\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function DashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashboardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'dashboard',\n      template: '<ng-content></ng-content>',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'dashboard',\n      host: {\n        class: 'dashboard'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }, {\n      type: DataTableService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    formatters: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    controlWrappers: [{\n      type: ContentChildren,\n      args: [ControlWrapperComponent]\n    }]\n  });\n})();\n\nclass GoogleChartComponent {\n  constructor(element, scriptLoaderService, dataTableService, dashboard) {\n    this.element = element;\n    this.scriptLoaderService = scriptLoaderService;\n    this.dataTableService = dataTableService;\n    this.dashboard = dashboard;\n    /**\n     * The chart-specific options. All options listen in the Google Charts documentation applying\n     * to the chart type specified can be used here.\n     */\n\n    this.options = {};\n    /**\n     * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n     * Defaults to `false` and should only be used when specifying the width or height of the chart\n     * in percent.\n     *\n     * Note that this can impact performance.\n     */\n\n    this.dynamicResize = false;\n    this.ready = new EventEmitter();\n    this.error = new EventEmitter();\n    this.select = new EventEmitter();\n    this.mouseover = new EventEmitter();\n    this.mouseleave = new EventEmitter();\n    this.wrapperReadySubject = new ReplaySubject(1);\n    this.initialized = false;\n    this.eventListeners = new Map();\n  }\n\n  get chart() {\n    return this.chartWrapper.getChart();\n  }\n\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  get chartWrapper() {\n    if (!this.wrapper) {\n      throw new Error('Trying to access the chart wrapper before it was fully initialized');\n    }\n\n    return this.wrapper;\n  }\n\n  set chartWrapper(wrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this for us\n    this.scriptLoaderService.loadChartPackages(getPackageForChart(this.type)).subscribe(() => {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters); // Only ever create the wrapper once to allow animations to happen when something changes.\n\n      this.wrapper = new google.visualization.ChartWrapper({\n        container: this.element.nativeElement,\n        chartType: this.type,\n        dataTable: this.dataTable,\n        options: this.mergeOptions()\n      });\n      this.registerChartEvents();\n      this.wrapperReadySubject.next(this.wrapper);\n      this.initialized = true;\n      this.drawChart();\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (changes.dynamicResize) {\n      this.updateResizeListener();\n    }\n\n    if (this.initialized) {\n      let shouldRedraw = false;\n\n      if (changes.data || changes.columns || changes.formatters) {\n        this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n        this.wrapper.setDataTable(this.dataTable);\n        shouldRedraw = true;\n      }\n\n      if (changes.type) {\n        this.wrapper.setChartType(this.type);\n        shouldRedraw = true;\n      }\n\n      if (changes.options || changes.width || changes.height || changes.title) {\n        this.wrapper.setOptions(this.mergeOptions());\n        shouldRedraw = true;\n      }\n\n      if (shouldRedraw) {\n        this.drawChart();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeToResizeIfSubscribed();\n  }\n  /**\n   * For listening to events other than the most common ones (available via Output properties).\n   *\n   * Can be called after the chart emits that it's \"ready\".\n   *\n   * Returns a handle that can be used for `removeEventListener`.\n   */\n\n\n  addEventListener(eventName, callback) {\n    const handle = this.registerChartEvent(this.chart, eventName, callback);\n    this.eventListeners.set(handle, {\n      eventName,\n      callback,\n      handle\n    });\n    return handle;\n  }\n\n  removeEventListener(handle) {\n    const entry = this.eventListeners.get(handle);\n\n    if (entry) {\n      google.visualization.events.removeListener(entry.handle);\n      this.eventListeners.delete(handle);\n    }\n  }\n\n  updateResizeListener() {\n    this.unsubscribeToResizeIfSubscribed();\n\n    if (this.dynamicResize) {\n      this.resizeSubscription = fromEvent(window, 'resize', {\n        passive: true\n      }).pipe(debounceTime(100)).subscribe(() => {\n        if (this.initialized) {\n          this.drawChart();\n        }\n      });\n    }\n  }\n\n  unsubscribeToResizeIfSubscribed() {\n    if (this.resizeSubscription != null) {\n      this.resizeSubscription.unsubscribe();\n      this.resizeSubscription = undefined;\n    }\n  }\n\n  mergeOptions() {\n    return Object.assign({\n      title: this.title,\n      width: this.width,\n      height: this.height\n    }, this.options);\n  }\n\n  registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n    this.registerChartEvent(this.wrapper, 'ready', () => {\n      // This could also be done by checking if we already subscribed to the events\n      google.visualization.events.removeAllListeners(this.chart);\n      this.registerChartEvent(this.chart, 'onmouseover', event => this.mouseover.emit(event));\n      this.registerChartEvent(this.chart, 'onmouseout', event => this.mouseleave.emit(event));\n      this.registerChartEvent(this.chart, 'select', () => {\n        const selection = this.chart.getSelection();\n        this.select.emit({\n          selection\n        });\n      });\n      this.eventListeners.forEach(x => x.handle = this.registerChartEvent(this.chart, x.eventName, x.callback));\n      this.ready.emit({\n        chart: this.chart\n      });\n    });\n    this.registerChartEvent(this.wrapper, 'error', error => this.error.emit(error));\n  }\n\n  registerChartEvent(object, eventName, callback) {\n    return google.visualization.events.addListener(object, eventName, callback);\n  }\n\n  drawChart() {\n    if (this.dashboard != null) {\n      // If this chart is part of a dashboard, the dashboard takes care of drawing\n      return;\n    }\n\n    this.wrapper.draw();\n  }\n\n}\n\nGoogleChartComponent.ɵfac = function GoogleChartComponent_Factory(t) {\n  return new (t || GoogleChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService), i0.ɵɵdirectiveInject(DataTableService), i0.ɵɵdirectiveInject(DashboardComponent, 8));\n};\n\nGoogleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartComponent,\n  selectors: [[\"google-chart\"]],\n  hostAttrs: [1, \"google-chart\"],\n  inputs: {\n    type: \"type\",\n    data: \"data\",\n    columns: \"columns\",\n    title: \"title\",\n    width: \"width\",\n    height: \"height\",\n    options: \"options\",\n    formatters: \"formatters\",\n    dynamicResize: \"dynamicResize\"\n  },\n  outputs: {\n    ready: \"ready\",\n    error: \"error\",\n    select: \"select\",\n    mouseover: \"mouseover\",\n    mouseleave: \"mouseleave\"\n  },\n  exportAs: [\"googleChart\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function GoogleChartComponent_Template(rf, ctx) {},\n  styles: [\"[_nghost-%COMP%] { width: fit-content; display: block; }\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-chart',\n      template: '',\n      styles: [':host { width: fit-content; display: block; }'],\n      host: {\n        class: 'google-chart'\n      },\n      exportAs: 'googleChart',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }, {\n      type: DataTableService\n    }, {\n      type: DashboardComponent,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    formatters: [{\n      type: Input\n    }],\n    dynamicResize: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    mouseover: [{\n      type: Output\n    }],\n    mouseleave: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartWrapperComponent {\n  constructor(element, scriptLoaderService) {\n    this.element = element;\n    this.scriptLoaderService = scriptLoaderService;\n    this.error = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.select = new EventEmitter();\n    this.wrapperReadySubject = new ReplaySubject(1);\n    this.initialized = false;\n  }\n\n  get chart() {\n    return this.chartWrapper.getChart();\n  }\n\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  get chartWrapper() {\n    if (!this.wrapper) {\n      throw new Error('Cannot access the chart wrapper before initialization.');\n    }\n\n    return this.wrapper;\n  }\n\n  set chartWrapper(wrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this else for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      if (!this.specs) {\n        this.specs = {};\n      }\n\n      const _a = this.specs,\n            {\n        containerId,\n        container\n      } = _a,\n            specs = __rest(_a, [\"containerId\", \"container\"]); // Only ever create the wrapper once to allow animations to happen if something changes.\n\n\n      this.wrapper = new google.visualization.ChartWrapper(Object.assign(Object.assign({}, specs), {\n        container: this.element.nativeElement\n      }));\n      this.registerChartEvents();\n      this.wrapperReadySubject.next(this.wrapper);\n      this.drawChart();\n      this.initialized = true;\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.specs) {\n      this.updateChart();\n      this.drawChart();\n    }\n  }\n\n  updateChart() {\n    if (!this.specs) {\n      // When creating the wrapper with empty specs, the google charts library will show an error\n      // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n      this.specs = {};\n    } // The typing here are not correct. These methods accept `undefined` as well.\n    // That's why we have to cast to `any`\n\n\n    this.wrapper.setChartType(this.specs.chartType);\n    this.wrapper.setDataTable(this.specs.dataTable);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setQuery(this.specs.query);\n    this.wrapper.setOptions(this.specs.options);\n    this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n    this.wrapper.setView(this.specs.view);\n  }\n\n  drawChart() {\n    if (this.wrapper) {\n      this.wrapper.draw();\n    }\n  }\n\n  registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object, eventName, callback) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({\n      chart: this.chart\n    }));\n    registerChartEvent(this.wrapper, 'error', error => this.error.emit(error));\n    registerChartEvent(this.wrapper, 'select', () => {\n      const selection = this.chart.getSelection();\n      this.select.emit({\n        selection\n      });\n    });\n  }\n\n}\n\nChartWrapperComponent.ɵfac = function ChartWrapperComponent_Factory(t) {\n  return new (t || ChartWrapperComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\n\nChartWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartWrapperComponent,\n  selectors: [[\"chart-wrapper\"]],\n  hostAttrs: [1, \"chart-wrapper\"],\n  inputs: {\n    specs: \"specs\"\n  },\n  outputs: {\n    error: \"error\",\n    ready: \"ready\",\n    select: \"select\"\n  },\n  exportAs: [\"chartWrapper\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function ChartWrapperComponent_Template(rf, ctx) {},\n  styles: [_c1],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'chart-wrapper',\n      template: '',\n      styles: [':host { width: fit-content; display: block; }'],\n      host: {\n        class: 'chart-wrapper'\n      },\n      exportAs: 'chartWrapper',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }];\n  }, {\n    specs: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GoogleChartsModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: GoogleChartsModule,\n      providers: [{\n        provide: GOOGLE_CHARTS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nGoogleChartsModule.ɵfac = function GoogleChartsModule_Factory(t) {\n  return new (t || GoogleChartsModule)();\n};\n\nGoogleChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GoogleChartsModule\n});\nGoogleChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptLoaderService]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],\n      providers: [ScriptLoaderService],\n      exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of angular-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ChartEditorComponent, ChartEditorRef, ChartType, ChartWrapperComponent, ControlWrapperComponent, DashboardComponent, FilterType, GOOGLE_CHARTS_CONFIG, GOOGLE_CHARTS_LAZY_CONFIG, GoogleChartComponent, GoogleChartsModule, ScriptLoaderService, getDefaultConfig, getPackageForChart };","map":{"version":3,"sources":["C:/Users/Ahmed Kazdar/OneDrive/Desktop/Cricity Bet/MobileBet/node_modules/angular-google-charts/fesm2015/angular-google-charts.js"],"names":["i1","Subject","of","Observable","ReplaySubject","combineLatest","fromEvent","i0","InjectionToken","inject","InjectFlags","LOCALE_ID","Injectable","Inject","Component","ChangeDetectionStrategy","EventEmitter","Input","Output","HostBinding","ContentChildren","Optional","NgModule","mergeMap","map","switchMap","debounceTime","__rest","ChartEditorRef","constructor","editor","doneSubject","addEventListeners","afterClosed","asObservable","cancel","closeDialog","google","visualization","events","addOneTimeListener","removeAllListeners","updatedChartWrapper","getChartWrapper","next","complete","ChartType","ChartTypesToPackages","AnnotationChart","AreaChart","Bar","BarChart","BubbleChart","Calendar","CandlestickChart","ColumnChart","ComboChart","PieChart","Gantt","Gauge","GeoChart","Histogram","Line","LineChart","Map","OrgChart","Sankey","Scatter","ScatterChart","SteppedAreaChart","Table","Timeline","TreeMap","WordTree","getPackageForChart","type","getDefaultConfig","version","safeMode","GOOGLE_CHARTS_CONFIG","GOOGLE_CHARTS_LAZY_CONFIG","providedIn","factory","configFromModule","Object","assign","ScriptLoaderService","zone","localeId","config$","scriptSource","scriptLoadSubject","isGoogleChartsAvailable","charts","loadChartPackages","packages","loadGoogleCharts","pipe","config","googleChartsConfig","observer","language","mapsApiKey","load","setOnLoadCallback","run","undefined","isLoadingGoogleCharts","script","createGoogleChartsScript","onload","onerror","console","error","Error","getGoogleChartsScript","pageScripts","Array","from","document","getElementsByTagName","find","src","createElement","async","appendChild","ɵfac","NgZone","ɵprov","decorators","args","ChartEditorComponent","scriptLoaderService","initializedSubject","initialized$","ngOnInit","subscribe","ChartEditor","editChart","component","options","chartWrapper","handle","openDialog","result","ɵcmp","selector","template","host","class","changeDetection","OnPush","DataTableService","create","data","columns","formatters","firstRowIsData","dataTable","arrayToDataTable","getDataAsTable","applyFormatters","val","formatter","format","colIndex","generateRandomId","Math","random","toString","substr","FilterType","ControlWrapperComponent","loaderService","ready","stateChange","id","wrapperReadySubject","wrapperReady$","controlWrapper","_controlWrapper","createControlWrapper","ngOnChanges","changes","setControlType","setOptions","state","setState","ControlWrapper","containerId","controlType","addListener","event","emit","exportAs","for","DashboardComponent","element","dataTableService","initialized","createDashboard","dashboard","draw","controlWrappersReady$","controlWrappers","control","chartsReady$","isArray","chart","Dashboard","nativeElement","initializeBindings","registerEvents","registerDashEvent","object","eventName","callback","forEach","chartWrappers","bind","ElementRef","GoogleChartComponent","dynamicResize","select","mouseover","mouseleave","eventListeners","getChart","wrapper","drawChart","ChartWrapper","container","chartType","mergeOptions","registerChartEvents","updateResizeListener","shouldRedraw","setDataTable","setChartType","width","height","title","ngOnDestroy","unsubscribeToResizeIfSubscribed","addEventListener","registerChartEvent","set","removeEventListener","entry","get","removeListener","delete","resizeSubscription","window","passive","unsubscribe","selection","getSelection","x","styles","ChartWrapperComponent","specs","_a","updateChart","setDataSourceUrl","dataSourceUrl","setQuery","query","setRefreshInterval","refreshInterval","setView","view","GoogleChartsModule","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["import * as i1 from 'rxjs';\nimport { Subject, of, Observable, ReplaySubject, combineLatest, fromEvent } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, InjectFlags, LOCALE_ID, Injectable, Inject, Component, ChangeDetectionStrategy, EventEmitter, Input, Output, HostBinding, ContentChildren, Optional, NgModule } from '@angular/core';\nimport { mergeMap, map, switchMap, debounceTime } from 'rxjs/operators';\nimport { __rest } from 'tslib';\n\n/// <reference path=\"./types.ts\" />\nclass ChartEditorRef {\n    constructor(editor) {\n        this.editor = editor;\n        this.doneSubject = new Subject();\n        this.addEventListeners();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is saved.\n     * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n     */\n    afterClosed() {\n        return this.doneSubject.asObservable();\n    }\n    /**\n     * Stops editing the chart and closes the dialog.\n     */\n    cancel() {\n        this.editor.closeDialog();\n    }\n    addEventListeners() {\n        google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n            google.visualization.events.removeAllListeners(this.editor);\n            const updatedChartWrapper = this.editor.getChartWrapper();\n            this.doneSubject.next(updatedChartWrapper);\n            this.doneSubject.complete();\n        });\n        google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n            google.visualization.events.removeAllListeners(this.editor);\n            this.doneSubject.next(null);\n            this.doneSubject.complete();\n        });\n    }\n}\n\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n    ChartType[\"AreaChart\"] = \"AreaChart\";\n    ChartType[\"Bar\"] = \"Bar\";\n    ChartType[\"BarChart\"] = \"BarChart\";\n    ChartType[\"BubbleChart\"] = \"BubbleChart\";\n    ChartType[\"Calendar\"] = \"Calendar\";\n    ChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n    ChartType[\"ColumnChart\"] = \"ColumnChart\";\n    ChartType[\"ComboChart\"] = \"ComboChart\";\n    ChartType[\"PieChart\"] = \"PieChart\";\n    ChartType[\"Gantt\"] = \"Gantt\";\n    ChartType[\"Gauge\"] = \"Gauge\";\n    ChartType[\"GeoChart\"] = \"GeoChart\";\n    ChartType[\"Histogram\"] = \"Histogram\";\n    ChartType[\"Line\"] = \"Line\";\n    ChartType[\"LineChart\"] = \"LineChart\";\n    ChartType[\"Map\"] = \"Map\";\n    ChartType[\"OrgChart\"] = \"OrgChart\";\n    ChartType[\"Sankey\"] = \"Sankey\";\n    ChartType[\"Scatter\"] = \"Scatter\";\n    ChartType[\"ScatterChart\"] = \"ScatterChart\";\n    ChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n    ChartType[\"Table\"] = \"Table\";\n    ChartType[\"Timeline\"] = \"Timeline\";\n    ChartType[\"TreeMap\"] = \"TreeMap\";\n    ChartType[\"WordTree\"] = \"WordTree\";\n})(ChartType || (ChartType = {}));\n\nconst ChartTypesToPackages = {\n    [ChartType.AnnotationChart]: 'annotationchart',\n    [ChartType.AreaChart]: 'corechart',\n    [ChartType.Bar]: 'bar',\n    [ChartType.BarChart]: 'corechart',\n    [ChartType.BubbleChart]: 'corechart',\n    [ChartType.Calendar]: 'calendar',\n    [ChartType.CandlestickChart]: 'corechart',\n    [ChartType.ColumnChart]: 'corechart',\n    [ChartType.ComboChart]: 'corechart',\n    [ChartType.PieChart]: 'corechart',\n    [ChartType.Gantt]: 'gantt',\n    [ChartType.Gauge]: 'gauge',\n    [ChartType.GeoChart]: 'geochart',\n    [ChartType.Histogram]: 'corechart',\n    [ChartType.Line]: 'line',\n    [ChartType.LineChart]: 'corechart',\n    [ChartType.Map]: 'map',\n    [ChartType.OrgChart]: 'orgchart',\n    [ChartType.Sankey]: 'sankey',\n    [ChartType.Scatter]: 'scatter',\n    [ChartType.ScatterChart]: 'corechart',\n    [ChartType.SteppedAreaChart]: 'corechart',\n    [ChartType.Table]: 'table',\n    [ChartType.Timeline]: 'timeline',\n    [ChartType.TreeMap]: 'treemap',\n    [ChartType.WordTree]: 'wordtree'\n};\nfunction getPackageForChart(type) {\n    return ChartTypesToPackages[type];\n}\nfunction getDefaultConfig() {\n    return {\n        version: 'current',\n        safeMode: false\n    };\n}\n\nconst GOOGLE_CHARTS_CONFIG = new InjectionToken('GOOGLE_CHARTS_CONFIG');\nconst GOOGLE_CHARTS_LAZY_CONFIG = new InjectionToken('GOOGLE_CHARTS_LAZY_CONFIG', {\n    providedIn: 'root',\n    factory: () => {\n        const configFromModule = inject(GOOGLE_CHARTS_CONFIG, InjectFlags.Optional);\n        return of(Object.assign(Object.assign({}, getDefaultConfig()), (configFromModule || {})));\n    }\n});\n\nclass ScriptLoaderService {\n    constructor(zone, localeId, config$) {\n        this.zone = zone;\n        this.localeId = localeId;\n        this.config$ = config$;\n        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';\n        this.scriptLoadSubject = new Subject();\n    }\n    /**\n     * Checks whether `google.charts` is available.\n     *\n     * If not, it can be loaded by calling `loadChartPackages`.\n     *\n     * @returns `true` if `google.charts` is available, `false` otherwise.\n     */\n    isGoogleChartsAvailable() {\n        if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Loads the Google Chart script and the provided chart packages.\n     * Can be called multiple times to load more packages.\n     *\n     * When called without any arguments, this will just load the default package\n     * containing the namespaces `google.charts` and `google.visualization` without any charts.\n     *\n     * @param packages The packages to load.\n     * @returns A stream emitting as soon as the chart packages are loaded.\n     */\n    loadChartPackages(...packages) {\n        return this.loadGoogleCharts().pipe(mergeMap(() => this.config$), map(config => {\n            return Object.assign(Object.assign({}, getDefaultConfig()), (config || {}));\n        }), switchMap((googleChartsConfig) => {\n            return new Observable(observer => {\n                const config = {\n                    packages,\n                    language: this.localeId,\n                    mapsApiKey: googleChartsConfig.mapsApiKey,\n                    safeMode: googleChartsConfig.safeMode\n                };\n                google.charts.load(googleChartsConfig.version, config);\n                google.charts.setOnLoadCallback(() => {\n                    this.zone.run(() => {\n                        observer.next();\n                        observer.complete();\n                    });\n                });\n            });\n        }));\n    }\n    /**\n     * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n     *\n     * @returns A stream emitting as soon as loading has completed.\n     * If the google charts script is already loaded, the stream emits immediately.\n     */\n    loadGoogleCharts() {\n        if (this.isGoogleChartsAvailable()) {\n            return of(undefined);\n        }\n        else if (!this.isLoadingGoogleCharts()) {\n            const script = this.createGoogleChartsScript();\n            script.onload = () => {\n                this.zone.run(() => {\n                    this.scriptLoadSubject.next();\n                    this.scriptLoadSubject.complete();\n                });\n            };\n            script.onerror = () => {\n                this.zone.run(() => {\n                    console.error('Failed to load the google charts script!');\n                    this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n                });\n            };\n        }\n        return this.scriptLoadSubject.asObservable();\n    }\n    isLoadingGoogleCharts() {\n        return this.getGoogleChartsScript() != null;\n    }\n    getGoogleChartsScript() {\n        const pageScripts = Array.from(document.getElementsByTagName('script'));\n        return pageScripts.find(script => script.src === this.scriptSource);\n    }\n    createGoogleChartsScript() {\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = this.scriptSource;\n        script.async = true;\n        document.getElementsByTagName('head')[0].appendChild(script);\n        return script;\n    }\n}\nScriptLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ScriptLoaderService, deps: [{ token: i0.NgZone }, { token: LOCALE_ID }, { token: GOOGLE_CHARTS_LAZY_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nScriptLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ScriptLoaderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ScriptLoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }, { type: i1.Observable, decorators: [{\n                    type: Inject,\n                    args: [GOOGLE_CHARTS_LAZY_CONFIG]\n                }] }]; } });\n\n/// <reference path=\"./types.ts\" />\nclass ChartEditorComponent {\n    constructor(scriptLoaderService) {\n        this.scriptLoaderService = scriptLoaderService;\n        this.initializedSubject = new Subject();\n    }\n    /**\n     * Emits as soon as the chart editor is fully initialized.\n     */\n    get initialized$() {\n        return this.initializedSubject.asObservable();\n    }\n    ngOnInit() {\n        this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n            this.editor = new google.visualization.ChartEditor();\n            this.initializedSubject.next(this.editor);\n            this.initializedSubject.complete();\n        });\n    }\n    editChart(component, options) {\n        if (!component.chartWrapper) {\n            throw new Error('Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n        }\n        if (!this.editor) {\n            throw new Error('Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n        }\n        const handle = new ChartEditorRef(this.editor);\n        this.editor.openDialog(component.chartWrapper, options || {});\n        handle.afterClosed().subscribe(result => {\n            if (result) {\n                component.chartWrapper = result;\n            }\n        });\n        return handle;\n    }\n}\nChartEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ChartEditorComponent, deps: [{ token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nChartEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: ChartEditorComponent, selector: \"chart-editor\", host: { classAttribute: \"chart-editor\" }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ChartEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'chart-editor',\n                    template: `<ng-content></ng-content>`,\n                    host: { class: 'chart-editor' },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: ScriptLoaderService }]; } });\n\nclass DataTableService {\n    create(data, columns, formatters) {\n        if (data == null) {\n            return undefined;\n        }\n        let firstRowIsData = true;\n        if (columns != null) {\n            firstRowIsData = false;\n        }\n        const dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(data, columns), firstRowIsData);\n        if (formatters) {\n            this.applyFormatters(dataTable, formatters);\n        }\n        return dataTable;\n    }\n    getDataAsTable(data, columns) {\n        if (columns) {\n            return [columns, ...data];\n        }\n        else {\n            return data;\n        }\n    }\n    applyFormatters(dataTable, formatters) {\n        for (const val of formatters) {\n            val.formatter.format(dataTable, val.colIndex);\n        }\n    }\n}\nDataTableService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DataTableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nDataTableService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DataTableService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DataTableService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\nfunction generateRandomId() {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nvar FilterType;\n(function (FilterType) {\n    FilterType[\"Category\"] = \"CategoryFilter\";\n    FilterType[\"ChartRange\"] = \"ChartRangeFilter\";\n    FilterType[\"DateRange\"] = \"DateRangeFilter\";\n    FilterType[\"NumberRange\"] = \"NumberRangeFilter\";\n    FilterType[\"String\"] = \"StringFilter\";\n})(FilterType || (FilterType = {}));\n\nclass ControlWrapperComponent {\n    constructor(loaderService) {\n        this.loaderService = loaderService;\n        /**\n         * Emits when an error occurs when attempting to render the control.\n         */\n        this.error = new EventEmitter();\n        /**\n         * The control is ready to accept user interaction and for external method calls.\n         *\n         * Alternatively, you can listen for a ready event on the dashboard holding the control\n         * and call control methods only after the event was fired.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Emits when the user interacts with the control, affecting its state.\n         * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n         *\n         * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n         */\n        this.stateChange = new EventEmitter();\n        /**\n         * A generated id assigned to this components DOM element.\n         */\n        this.id = generateRandomId();\n        this.wrapperReadySubject = new ReplaySubject(1);\n    }\n    /**\n     * Emits after the `ControlWrapper` was created.\n     */\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get controlWrapper() {\n        if (!this._controlWrapper) {\n            throw new Error(`Cannot access the control wrapper before it being initialized.`);\n        }\n        return this._controlWrapper;\n    }\n    ngOnInit() {\n        this.loaderService.loadChartPackages('controls').subscribe(() => {\n            this.createControlWrapper();\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this._controlWrapper) {\n            return;\n        }\n        if (changes.type) {\n            this._controlWrapper.setControlType(this.type);\n        }\n        if (changes.options) {\n            this._controlWrapper.setOptions(this.options || {});\n        }\n        if (changes.state) {\n            this._controlWrapper.setState(this.state || {});\n        }\n    }\n    createControlWrapper() {\n        this._controlWrapper = new google.visualization.ControlWrapper({\n            containerId: this.id,\n            controlType: this.type,\n            state: this.state,\n            options: this.options\n        });\n        this.addEventListeners();\n        this.wrapperReadySubject.next(this._controlWrapper);\n    }\n    addEventListeners() {\n        google.visualization.events.removeAllListeners(this._controlWrapper);\n        google.visualization.events.addListener(this._controlWrapper, 'ready', (event) => this.ready.emit(event));\n        google.visualization.events.addListener(this._controlWrapper, 'error', (event) => this.error.emit(event));\n        google.visualization.events.addListener(this._controlWrapper, 'statechange', (event) => this.stateChange.emit(event));\n    }\n}\nControlWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ControlWrapperComponent, deps: [{ token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nControlWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: ControlWrapperComponent, selector: \"control-wrapper\", inputs: { for: \"for\", type: \"type\", options: \"options\", state: \"state\" }, outputs: { error: \"error\", ready: \"ready\", stateChange: \"stateChange\" }, host: { properties: { \"id\": \"this.id\" }, classAttribute: \"control-wrapper\" }, exportAs: [\"controlWrapper\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ControlWrapperComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'control-wrapper',\n                    template: '',\n                    host: { class: 'control-wrapper' },\n                    exportAs: 'controlWrapper',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: ScriptLoaderService }]; }, propDecorators: { for: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], state: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }], stateChange: [{\n                type: Output\n            }], id: [{\n                type: HostBinding,\n                args: ['id']\n            }] } });\n\nclass DashboardComponent {\n    constructor(element, loaderService, dataTableService) {\n        this.element = element;\n        this.loaderService = loaderService;\n        this.dataTableService = dataTableService;\n        /**\n         * The dashboard has completed drawing and is ready to accept changes.\n         *\n         * The ready event will also fire:\n         * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n         * - after redrawing any chart on the dashboard.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Emits when an error occurs when attempting to render the dashboard.\n         * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n         */\n        this.error = new EventEmitter();\n        this.initialized = false;\n    }\n    ngOnInit() {\n        this.loaderService.loadChartPackages('controls').subscribe(() => {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            this.createDashboard();\n            this.initialized = true;\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            return;\n        }\n        if (changes.data || changes.columns || changes.formatters) {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            this.dashboard.draw(this.dataTable);\n        }\n    }\n    createDashboard() {\n        // TODO: This should happen in the control wrapper\n        // However, I don't yet know how to do this because then `bind()` would get called multiple times\n        // for the same control if something changes. This is not supported by google charts as far as I can tell\n        // from their source code.\n        const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n        const chartsReady$ = this.controlWrappers\n            .map(control => control.for)\n            .map(charts => {\n            if (Array.isArray(charts)) {\n                // CombineLatest waits for all observables\n                return combineLatest(charts.map(chart => chart.wrapperReady$));\n            }\n            else {\n                return charts.wrapperReady$;\n            }\n        });\n        // We have to wait for all chart wrappers and control wrappers to be initialized\n        // before we can compose them together to create the dashboard\n        combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n            this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n            this.initializeBindings();\n            this.registerEvents();\n            this.dashboard.draw(this.dataTable);\n        });\n    }\n    registerEvents() {\n        google.visualization.events.removeAllListeners(this.dashboard);\n        const registerDashEvent = (object, eventName, callback) => {\n            google.visualization.events.addListener(object, eventName, callback);\n        };\n        registerDashEvent(this.dashboard, 'ready', () => this.ready.emit());\n        registerDashEvent(this.dashboard, 'error', (error) => this.error.emit(error));\n    }\n    initializeBindings() {\n        this.controlWrappers.forEach(control => {\n            if (Array.isArray(control.for)) {\n                const chartWrappers = control.for.map(chart => chart.chartWrapper);\n                this.dashboard.bind(control.controlWrapper, chartWrappers);\n            }\n            else {\n                this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n            }\n        });\n    }\n}\nDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DashboardComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }, { token: DataTableService }], target: i0.ɵɵFactoryTarget.Component });\nDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: DashboardComponent, selector: \"dashboard\", inputs: { data: \"data\", columns: \"columns\", formatters: \"formatters\" }, outputs: { ready: \"ready\", error: \"error\" }, host: { classAttribute: \"dashboard\" }, queries: [{ propertyName: \"controlWrappers\", predicate: ControlWrapperComponent }], exportAs: [\"dashboard\"], usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DashboardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'dashboard',\n                    template: '<ng-content></ng-content>',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'dashboard',\n                    host: { class: 'dashboard' }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }, { type: DataTableService }]; }, propDecorators: { data: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], formatters: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], controlWrappers: [{\n                type: ContentChildren,\n                args: [ControlWrapperComponent]\n            }] } });\n\nclass GoogleChartComponent {\n    constructor(element, scriptLoaderService, dataTableService, dashboard) {\n        this.element = element;\n        this.scriptLoaderService = scriptLoaderService;\n        this.dataTableService = dataTableService;\n        this.dashboard = dashboard;\n        /**\n         * The chart-specific options. All options listen in the Google Charts documentation applying\n         * to the chart type specified can be used here.\n         */\n        this.options = {};\n        /**\n         * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n         * Defaults to `false` and should only be used when specifying the width or height of the chart\n         * in percent.\n         *\n         * Note that this can impact performance.\n         */\n        this.dynamicResize = false;\n        this.ready = new EventEmitter();\n        this.error = new EventEmitter();\n        this.select = new EventEmitter();\n        this.mouseover = new EventEmitter();\n        this.mouseleave = new EventEmitter();\n        this.wrapperReadySubject = new ReplaySubject(1);\n        this.initialized = false;\n        this.eventListeners = new Map();\n    }\n    get chart() {\n        return this.chartWrapper.getChart();\n    }\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get chartWrapper() {\n        if (!this.wrapper) {\n            throw new Error('Trying to access the chart wrapper before it was fully initialized');\n        }\n        return this.wrapper;\n    }\n    set chartWrapper(wrapper) {\n        this.wrapper = wrapper;\n        this.drawChart();\n    }\n    ngOnInit() {\n        // We don't need to load any chart packages, the chart wrapper will handle this for us\n        this.scriptLoaderService.loadChartPackages(getPackageForChart(this.type)).subscribe(() => {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            // Only ever create the wrapper once to allow animations to happen when something changes.\n            this.wrapper = new google.visualization.ChartWrapper({\n                container: this.element.nativeElement,\n                chartType: this.type,\n                dataTable: this.dataTable,\n                options: this.mergeOptions()\n            });\n            this.registerChartEvents();\n            this.wrapperReadySubject.next(this.wrapper);\n            this.initialized = true;\n            this.drawChart();\n        });\n    }\n    ngOnChanges(changes) {\n        if (changes.dynamicResize) {\n            this.updateResizeListener();\n        }\n        if (this.initialized) {\n            let shouldRedraw = false;\n            if (changes.data || changes.columns || changes.formatters) {\n                this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n                this.wrapper.setDataTable(this.dataTable);\n                shouldRedraw = true;\n            }\n            if (changes.type) {\n                this.wrapper.setChartType(this.type);\n                shouldRedraw = true;\n            }\n            if (changes.options || changes.width || changes.height || changes.title) {\n                this.wrapper.setOptions(this.mergeOptions());\n                shouldRedraw = true;\n            }\n            if (shouldRedraw) {\n                this.drawChart();\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unsubscribeToResizeIfSubscribed();\n    }\n    /**\n     * For listening to events other than the most common ones (available via Output properties).\n     *\n     * Can be called after the chart emits that it's \"ready\".\n     *\n     * Returns a handle that can be used for `removeEventListener`.\n     */\n    addEventListener(eventName, callback) {\n        const handle = this.registerChartEvent(this.chart, eventName, callback);\n        this.eventListeners.set(handle, { eventName, callback, handle });\n        return handle;\n    }\n    removeEventListener(handle) {\n        const entry = this.eventListeners.get(handle);\n        if (entry) {\n            google.visualization.events.removeListener(entry.handle);\n            this.eventListeners.delete(handle);\n        }\n    }\n    updateResizeListener() {\n        this.unsubscribeToResizeIfSubscribed();\n        if (this.dynamicResize) {\n            this.resizeSubscription = fromEvent(window, 'resize', { passive: true })\n                .pipe(debounceTime(100))\n                .subscribe(() => {\n                if (this.initialized) {\n                    this.drawChart();\n                }\n            });\n        }\n    }\n    unsubscribeToResizeIfSubscribed() {\n        if (this.resizeSubscription != null) {\n            this.resizeSubscription.unsubscribe();\n            this.resizeSubscription = undefined;\n        }\n    }\n    mergeOptions() {\n        return Object.assign({ title: this.title, width: this.width, height: this.height }, this.options);\n    }\n    registerChartEvents() {\n        google.visualization.events.removeAllListeners(this.wrapper);\n        this.registerChartEvent(this.wrapper, 'ready', () => {\n            // This could also be done by checking if we already subscribed to the events\n            google.visualization.events.removeAllListeners(this.chart);\n            this.registerChartEvent(this.chart, 'onmouseover', (event) => this.mouseover.emit(event));\n            this.registerChartEvent(this.chart, 'onmouseout', (event) => this.mouseleave.emit(event));\n            this.registerChartEvent(this.chart, 'select', () => {\n                const selection = this.chart.getSelection();\n                this.select.emit({ selection });\n            });\n            this.eventListeners.forEach(x => (x.handle = this.registerChartEvent(this.chart, x.eventName, x.callback)));\n            this.ready.emit({ chart: this.chart });\n        });\n        this.registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));\n    }\n    registerChartEvent(object, eventName, callback) {\n        return google.visualization.events.addListener(object, eventName, callback);\n    }\n    drawChart() {\n        if (this.dashboard != null) {\n            // If this chart is part of a dashboard, the dashboard takes care of drawing\n            return;\n        }\n        this.wrapper.draw();\n    }\n}\nGoogleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: GoogleChartComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }, { token: DataTableService }, { token: DashboardComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: GoogleChartComponent, selector: \"google-chart\", inputs: { type: \"type\", data: \"data\", columns: \"columns\", title: \"title\", width: \"width\", height: \"height\", options: \"options\", formatters: \"formatters\", dynamicResize: \"dynamicResize\" }, outputs: { ready: \"ready\", error: \"error\", select: \"select\", mouseover: \"mouseover\", mouseleave: \"mouseleave\" }, host: { classAttribute: \"google-chart\" }, exportAs: [\"googleChart\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [\":host { width: fit-content; display: block; }\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: GoogleChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'google-chart',\n                    template: '',\n                    styles: [':host { width: fit-content; display: block; }'],\n                    host: { class: 'google-chart' },\n                    exportAs: 'googleChart',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }, { type: DataTableService }, { type: DashboardComponent, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { type: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], formatters: [{\n                type: Input\n            }], dynamicResize: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], mouseover: [{\n                type: Output\n            }], mouseleave: [{\n                type: Output\n            }] } });\n\nclass ChartWrapperComponent {\n    constructor(element, scriptLoaderService) {\n        this.element = element;\n        this.scriptLoaderService = scriptLoaderService;\n        this.error = new EventEmitter();\n        this.ready = new EventEmitter();\n        this.select = new EventEmitter();\n        this.wrapperReadySubject = new ReplaySubject(1);\n        this.initialized = false;\n    }\n    get chart() {\n        return this.chartWrapper.getChart();\n    }\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get chartWrapper() {\n        if (!this.wrapper) {\n            throw new Error('Cannot access the chart wrapper before initialization.');\n        }\n        return this.wrapper;\n    }\n    set chartWrapper(wrapper) {\n        this.wrapper = wrapper;\n        this.drawChart();\n    }\n    ngOnInit() {\n        // We don't need to load any chart packages, the chart wrapper will handle this else for us\n        this.scriptLoaderService.loadChartPackages().subscribe(() => {\n            if (!this.specs) {\n                this.specs = {};\n            }\n            const _a = this.specs, { containerId, container } = _a, specs = __rest(_a, [\"containerId\", \"container\"]);\n            // Only ever create the wrapper once to allow animations to happen if something changes.\n            this.wrapper = new google.visualization.ChartWrapper(Object.assign(Object.assign({}, specs), { container: this.element.nativeElement }));\n            this.registerChartEvents();\n            this.wrapperReadySubject.next(this.wrapper);\n            this.drawChart();\n            this.initialized = true;\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            return;\n        }\n        if (changes.specs) {\n            this.updateChart();\n            this.drawChart();\n        }\n    }\n    updateChart() {\n        if (!this.specs) {\n            // When creating the wrapper with empty specs, the google charts library will show an error\n            // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n            this.specs = {};\n        }\n        // The typing here are not correct. These methods accept `undefined` as well.\n        // That's why we have to cast to `any`\n        this.wrapper.setChartType(this.specs.chartType);\n        this.wrapper.setDataTable(this.specs.dataTable);\n        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n        this.wrapper.setQuery(this.specs.query);\n        this.wrapper.setOptions(this.specs.options);\n        this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n        this.wrapper.setView(this.specs.view);\n    }\n    drawChart() {\n        if (this.wrapper) {\n            this.wrapper.draw();\n        }\n    }\n    registerChartEvents() {\n        google.visualization.events.removeAllListeners(this.wrapper);\n        const registerChartEvent = (object, eventName, callback) => {\n            google.visualization.events.addListener(object, eventName, callback);\n        };\n        registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({ chart: this.chart }));\n        registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));\n        registerChartEvent(this.wrapper, 'select', () => {\n            const selection = this.chart.getSelection();\n            this.select.emit({ selection });\n        });\n    }\n}\nChartWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ChartWrapperComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nChartWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: ChartWrapperComponent, selector: \"chart-wrapper\", inputs: { specs: \"specs\" }, outputs: { error: \"error\", ready: \"ready\", select: \"select\" }, host: { classAttribute: \"chart-wrapper\" }, exportAs: [\"chartWrapper\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [\":host { width: fit-content; display: block; }\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ChartWrapperComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'chart-wrapper',\n                    template: '',\n                    styles: [':host { width: fit-content; display: block; }'],\n                    host: { class: 'chart-wrapper' },\n                    exportAs: 'chartWrapper',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }]; }, propDecorators: { specs: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }] } });\n\nclass GoogleChartsModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: GoogleChartsModule,\n            providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]\n        };\n    }\n}\nGoogleChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: GoogleChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGoogleChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: GoogleChartsModule, declarations: [GoogleChartComponent,\n        ChartWrapperComponent,\n        DashboardComponent,\n        ControlWrapperComponent,\n        ChartEditorComponent], exports: [GoogleChartComponent,\n        ChartWrapperComponent,\n        DashboardComponent,\n        ControlWrapperComponent,\n        ChartEditorComponent] });\nGoogleChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: GoogleChartsModule, providers: [ScriptLoaderService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: GoogleChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        GoogleChartComponent,\n                        ChartWrapperComponent,\n                        DashboardComponent,\n                        ControlWrapperComponent,\n                        ChartEditorComponent\n                    ],\n                    providers: [ScriptLoaderService],\n                    exports: [\n                        GoogleChartComponent,\n                        ChartWrapperComponent,\n                        DashboardComponent,\n                        ControlWrapperComponent,\n                        ChartEditorComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartEditorComponent, ChartEditorRef, ChartType, ChartWrapperComponent, ControlWrapperComponent, DashboardComponent, FilterType, GOOGLE_CHARTS_CONFIG, GOOGLE_CHARTS_LAZY_CONFIG, GoogleChartComponent, GoogleChartsModule, ScriptLoaderService, getDefaultConfig, getPackageForChart };\n"]},"metadata":{},"sourceType":"module"}