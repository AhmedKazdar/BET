{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./token.service\";\nexport let MainService = /*#__PURE__*/(() => {\n  class MainService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.siteName = environment.siteName;\n      this.apisUrl = environment.apisUrl;\n      this.apis$ = new ReplaySubject();\n      this.apis2$ = new ReplaySubject();\n      this.apis2$.subscribe(res => {\n        if (res) {\n          if (res.maintanance == 1) {\n            this.authService.setMaintanance(res.maintanance);\n          } else if (res.maintanance == 2) {\n            this.authService.setMaintanance(res.maintanance);\n          } else if (res.maintanance == 0) {\n            this.authService.removeMaintanance();\n          }\n\n          let hostname = window.origin;\n\n          if (hostname.indexOf('cricbuzzer') > -1 || hostname.indexOf('cricbuzzerlive') > -1 || hostname.indexOf('localhost') > -1) {\n            res.ip = res.devIp; // res.fSource = 1;\n          } else {\n            res.ip = res.sslclient;\n          }\n\n          if (location.protocol === 'https:') {\n            res.racingApi = res.sslRacingApi;\n            res.racingSocketApi = res.sslracingSocketApi;\n            res.sportApi = res.sslSportApi;\n            res.sportSocketApi = res.sslsportSocketApi;\n            res.allSportApi = res.sslAllSportApi;\n            res.allSportSocketApi = res.sslAllSportSocketApi;\n            res.bannerApi = res.bannerImg;\n\n            if (hostname.indexOf('cricbuzzer') > -1 || hostname.indexOf('cricbuzzerlive') > -1 || hostname.indexOf('localhost') > -1) {\n              res.ip = res.devIp; // res.fSource = 1;\n            } else {\n              res.ip = res.sslclient;\n            }\n          }\n\n          this.apis = res;\n        }\n      });\n    }\n\n    getApis() {\n      return this.http.get(`${this.apisUrl}`);\n    }\n\n  }\n\n  MainService.ɵfac = function MainService_Factory(t) {\n    return new (t || MainService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n  };\n\n  MainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MainService,\n    factory: MainService.ɵfac,\n    providedIn: 'root'\n  });\n  return MainService;\n})();","map":null,"metadata":{},"sourceType":"module"}