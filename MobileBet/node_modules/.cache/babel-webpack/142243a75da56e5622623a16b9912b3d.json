{"ast":null,"code":"import { interval, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token.service\";\nimport * as i2 from \"./share-data.service\";\nimport * as i3 from \"./main.service\";\nimport * as i4 from \"./sports-api.service\";\nexport let SocketService = /*#__PURE__*/(() => {\n  class SocketService {\n    constructor(tokenService, shareService, main, sportApi) {\n      this.tokenService = tokenService;\n      this.shareService = shareService;\n      this.main = main;\n      this.sportApi = sportApi;\n      this.siteName = environment.siteName;\n      this.socketTimeOut = false;\n      this.marketIds = '';\n      this.isVir = false;\n      this.isKabaddi = false;\n      this.inPlay$ = new Subject();\n      this.isLogin = false;\n      this.isAllSport = false;\n      this.isOddsPendingApi = false;\n      this.isFancyPendingApi = false;\n      this.isSportBookPendingApi = false;\n\n      if (this.tokenService.getToken()) {\n        this.isLogin = true;\n      } // if (this.isLogin) {\n      //   this.inPlay$.subscribe((inPlay) => {\n      //     this.startOddsInterval(inPlay == 1 ? 1000 : 3000);\n      //   });\n      // } else {\n      //   this.inPlay$.subscribe((inPlay) => {\n      //     this.startOddsInterval(inPlay == 1 ? 10000 : 30000);\n      //   });\n      // }\n\n\n      this.main.apis2$.subscribe(res => {\n        if (res) {\n          this.oddsSocketUrl = res.sportSocketApi;\n          this.allSportSocketUrl = res.allSportSocketApi;\n          this.racingSocketApi = res.racingSocketApi;\n          this.fSource = res.fSource;\n        }\n      });\n    }\n\n    checkAuthToken() {\n      this.shareService.shareOddsData(null); // console.log(this.tokenService.getToken())\n\n      if (this.tokenService.getToken()) {\n        this.isLogin = true;\n      }\n\n      if (this.isLogin) {\n        this.inPlay$.subscribe(inPlay => {\n          this.startOddsInterval(inPlay == 1 ? 1000 : 3000);\n        });\n      } else {\n        this.inPlay$.subscribe(inPlay => {\n          this.startOddsInterval(inPlay == 1 ? 2000 : 5000);\n        });\n      }\n    }\n\n    getFSource() {\n      // return this.fSource;\n      if (this.matchData.eventTypeId != 4 || this.isVir) {\n        return '0';\n      } else {\n        return this.fSource;\n      }\n    }\n\n    startOddsInterval(intervalTime) {\n      if (this.intervalSub) {\n        this.intervalSub.unsubscribe();\n      }\n\n      if (this.matchId) {\n        this.getAllApiData();\n        this.getSportsBook();\n      } // console.log(this.matchId)\n\n\n      this.intervalSub = interval(intervalTime).subscribe(() => {\n        if (!this.socketTimeOut && this.matchId) {\n          this.getAllApiData();\n        }\n\n        this.getSportsBook();\n      });\n    }\n\n    getAllApiData() {\n      if (!this.isVir && !this.isKabaddi) {\n        if (this.isOddsPendingApi) {\n          return;\n        }\n\n        this.isOddsPendingApi = true;\n        this.sportApi.getOddsInplay(this.marketIds, this.isAllSport).subscribe(data => {\n          this.shareService.shareOddsData(data);\n          this.isOddsPendingApi = false;\n        }, err => {\n          this.isOddsPendingApi = false;\n        });\n      }\n\n      if (this.matchData.eventTypeId == 4 || this.isKabaddi) {\n        if (this.isFancyPendingApi) {\n          return;\n        }\n\n        this.isFancyPendingApi = true;\n        let fSource;\n\n        if (this.matchData.eventTypeId != 4 || this.isVir) {\n          fSource = '0';\n        } else {\n          fSource = this.fSource;\n        }\n\n        this.sportApi.getBmFancy(this.matchId, fSource).subscribe(data => {\n          this.shareService.shareOddsData(data);\n          this.isFancyPendingApi = false;\n        }, err => {\n          this.isFancyPendingApi = false;\n        });\n      }\n    }\n\n    getSportsBook() {\n      if (this.matchData.isSportBook == undefined) {\n        this.matchData.isSportBook = true;\n      } // if (this.matchId && (this.siteName == \"cricbuzzer\")) {\n\n\n      if ((this.matchData.eventTypeId == 4 || this.matchData.eventTypeId == 1 || this.matchData.eventTypeId == 2 || this.matchData.eventTypeId == 52) && this.matchData.isSportBook && this.matchData.isPremium && this.isLogin && !this.isVir && this.siteName != 'betswiz222') {\n        if (this.isSportBookPendingApi) {\n          return;\n        }\n\n        this.isSportBookPendingApi = true;\n        this.sportApi.getSportsBook(this.matchId).subscribe(data => {\n          if (!data.data && !data.sportsBookMarket) {\n            data['sportsBookMarket'] = [];\n          }\n\n          data.sportsBookMarket.forEach(sbMarket => {\n            let favArray = localStorage.getItem('favourite');\n            let favArrays = [];\n\n            if (favArray) {\n              favArrays = favArray.split(',');\n            }\n\n            let sbIndex = _.indexOf(favArrays, 'premium_' + this.matchId + '_' + sbMarket.id);\n\n            if (sbIndex > -1) {\n              sbMarket['isMulti'] = true;\n            }\n          });\n          this.shareService.shareOddsData(data);\n          this.isSportBookPendingApi = false;\n        }, err => {\n          this.isSportBookPendingApi = false;\n        });\n      } // }\n\n    }\n\n    getWebSocketData(match) {\n      this.checkAuthToken();\n\n      if (!match) {\n        return false;\n      } // console.log(match)\n\n\n      this.matchData = match;\n\n      if (!match.isRacing && !match.isVirtual) {\n        this.matchId = match.eventId;\n        this.isVir = match.isVir;\n        this.isKabaddi = match.isKabaddi;\n\n        if (match.eventTypeId == 4 || match.eventTypeId == 1 || match.eventTypeId == 2) {\n          // if ((match.eventTypeId == 4 || match.eventTypeId == 1 || match.eventTypeId == 2) && match.markets[0]?.marketId.length < 13) {\n          this.isAllSport = false;\n        } else {\n          this.isAllSport = true;\n        }\n\n        let ids = match.markets.reduce((acc, c) => [...acc, c.marketId], []);\n        this.marketIds = ids.join(',');\n\n        if (this.isLogin) {\n          this.startOddsInterval(match.isInPlay == 1 ? 1000 : 5000);\n        } else {\n          this.startOddsInterval(match.isInPlay == 1 ? 10000 : 50000);\n        }\n      } else if (match.isVirtual) {\n        this.matchId = match.eventId;\n        this.socketTimeOut = false;\n        this.isVir = match.isVir;\n\n        if (this.isLogin) {\n          this.startOddsInterval(match.isInPlay == 1 ? 1000 : 5000);\n        } else {\n          this.startOddsInterval(match.isInPlay == 1 ? 10000 : 50000);\n        }\n\n        return false;\n      }\n\n      if (match && match.port > 0) {\n        let socketUrl = this.oddsSocketUrl;\n\n        if (match.isRacing) {\n          socketUrl = this.racingSocketApi;\n        }\n\n        if (this.isAllSport) {\n          socketUrl = this.allSportSocketUrl;\n        } // console.log('hhh')\n\n\n        var url = `${socketUrl}:${match.port}/${this.isLogin ? '?logged=true&source=' + this.fSource : '?logged=false&source=' + this.fSource}`;\n\n        if (location.protocol === 'https:' && !match.isRacing) {\n          url = `${socketUrl}/spport=${match.port}/${this.isLogin ? '?logged=true&source=' + this.fSource : '?logged=false&source=' + this.fSource}`;\n        }\n\n        if (location.protocol === 'https:' && match.isRacing) {\n          url = `${socketUrl}/hgport=${match.port}/${this.isLogin ? '?logged=true' : '?logged=false'}`;\n        }\n\n        if (!this.subject$ || this.subject$.CLOSED) {\n          this.subject$ = this.createConnection(url); // console.log(this.subject$);\n\n          this.subject$.onopen = error => {// console.log(`[success]: connected to socket`);\n          };\n\n          this.subject$.onmessage = message => {\n            message = JSON.parse(message.data);\n\n            if (!match.isRacing && !match.isVirtual) {\n              this.socketTimeOut = true;\n              clearTimeout(this.timeOutOdds);\n              this.timeOutOdds = setTimeout(() => {\n                this.socketTimeOut = false;\n              }, match.isInPlay == 1 ? 3000 : 10000);\n            }\n\n            this.shareService.shareOddsData(message); // console.log(message);\n          };\n\n          this.subject$.onerror = error => {// console.log(`[error]: Error connecting to socket`);\n          }; // this.subject$.onclose = (e) => {\n          // console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n          // };\n\n        }\n      } else if (!match.isVirtual) {\n        this.socketTimeOut = false;\n      }\n    }\n\n    createConnection(url) {\n      return new WebSocket(url);\n    }\n\n    closeConnection() {\n      this.shareService.shareOddsData(null);\n\n      if (this.subject$ && this.subject$.OPEN) {\n        this.subject$.close();\n        this.shareService.shareOddsData(null);\n        this.matchId = null;\n      }\n\n      if (this.intervalSub) {\n        this.intervalSub.unsubscribe();\n      }\n    }\n\n  }\n\n  SocketService.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.ShareDataService), i0.ɵɵinject(i3.MainService), i0.ɵɵinject(i4.SportsApiService));\n  };\n\n  SocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac,\n    providedIn: 'root'\n  });\n  return SocketService;\n})();","map":null,"metadata":{},"sourceType":"module"}