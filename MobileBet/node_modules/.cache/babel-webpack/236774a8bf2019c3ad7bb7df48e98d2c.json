{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let InputRestrictionDirective = /*#__PURE__*/(() => {\n  class InputRestrictionDirective {\n    constructor(el) {\n      this.arabicRegex = /^[a-zA-Z0-9]*$/;\n      this.inputElement = el;\n    }\n\n    onKeyPress(event) {\n      if (this.appInputRestriction === 'integer') {\n        this.integerOnly(event);\n      } else if (this.appInputRestriction === 'noSpecialChars') {\n        this.noSpecialChars(event);\n      }\n    }\n\n    integerOnly(event) {\n      const e = event;\n\n      if (e.key === 'Tab' || e.key === 'TAB') {\n        return;\n      }\n\n      if ([46, 8, 9, 27, 13, 110].indexOf(e.keyCode) !== -1 || // Allow: Ctrl+A\n      e.keyCode === 65 && e.ctrlKey === true || // Allow: Ctrl+C\n      e.keyCode === 67 && e.ctrlKey === true || // Allow: Ctrl+V\n      e.keyCode === 86 && e.ctrlKey === true || // Allow: Ctrl+X\n      e.keyCode === 88 && e.ctrlKey === true) {\n        // let it happen, don't do anything\n        return;\n      }\n\n      if (['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'].indexOf(e.key) === -1) {\n        e.preventDefault();\n      }\n    }\n\n    noSpecialChars(event) {\n      const e = event;\n\n      if (e.key === 'Tab' || e.key === 'TAB') {\n        return;\n      }\n\n      const ch = e.key;\n      const regEx = new RegExp(this.arabicRegex);\n\n      if (regEx.test(ch)) {\n        return;\n      }\n\n      e.preventDefault();\n    }\n\n    noSpace(event) {\n      const e = event;\n\n      if (e.key === 'Tab' || e.key === 'TAB') {\n        return;\n      }\n\n      const ch = e.key;\n      const regEx = new RegExp(/[\\w]/);\n\n      if (regEx.test(ch)) {\n        return;\n      }\n\n      e.preventDefault();\n    }\n\n    onPaste(event) {\n      let regex;\n\n      if (this.appInputRestriction === 'integer') {\n        regex = /[0-9]/g;\n      } else if (this.appInputRestriction === 'noSpecialChars') {\n        regex = /[a-zA-Z0-9_]/g;\n      }\n\n      const e = event;\n      const pasteData = e.clipboardData.getData('text/plain');\n      let m;\n      let matches = 0;\n\n      while ((m = regex.exec(pasteData)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        } // The result can be accessed through the `m`-variable.\n\n\n        m.forEach((match, groupIndex) => {\n          matches++;\n        });\n      }\n\n      if (matches === pasteData.length) {\n        return;\n      } else {\n        e.preventDefault();\n      }\n    }\n\n  }\n\n  InputRestrictionDirective.ɵfac = function InputRestrictionDirective_Factory(t) {\n    return new (t || InputRestrictionDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  InputRestrictionDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: InputRestrictionDirective,\n    selectors: [[\"\", \"appInputRestriction\", \"\"]],\n    hostBindings: function InputRestrictionDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keypress\", function InputRestrictionDirective_keypress_HostBindingHandler($event) {\n          return ctx.onKeyPress($event);\n        })(\"paste\", function InputRestrictionDirective_paste_HostBindingHandler($event) {\n          return ctx.onPaste($event);\n        });\n      }\n    },\n    inputs: {\n      appInputRestriction: \"appInputRestriction\"\n    }\n  });\n  return InputRestrictionDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}