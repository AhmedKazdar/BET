{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ahmed Kazdar/OneDrive/Desktop/Cricity Bet/MobileBet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"ng-recaptcha\";\nimport * as i4 from \"@angular/fire/auth\";\nimport * as i5 from \"../services/token.service\";\nimport * as i6 from \"ngx-toastr\";\nimport * as i7 from \"@angular/fire/database\";\nimport * as i8 from \"../services/login.service\";\nimport * as i9 from \"../services/client-api.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, http, recaptchaV3Service, fireAuth, tokenService, toastr, db, loginService, clientApi) {\n      this.router = router;\n      this.http = http;\n      this.recaptchaV3Service = recaptchaV3Service;\n      this.fireAuth = fireAuth;\n      this.tokenService = tokenService;\n      this.toastr = toastr;\n      this.db = db;\n      this.loginService = loginService;\n      this.clientApi = clientApi;\n      this.isAffiliate = environment.isAffiliate;\n      this.siteName = environment.siteName;\n      this.fireAuth.authState.subscribe(user => {\n        if (user) {\n          console.log(user.email);\n        } else {\n          localStorage.setItem('user', 'null');\n          JSON.parse(localStorage.getItem('user'));\n        }\n      });\n      this.clientApi.getb2cid().subscribe(resp => {\n        if (resp) {\n          this.b2cID = resp.result[0].b2cID;\n        }\n      });\n    }\n\n    get isLoggedIn() {\n      const user = JSON.parse(localStorage.getItem('user'));\n      return user !== null && user.emailVerified !== false ? true : false;\n    }\n\n    GoogleAuth(type) {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      return this.AuthLogin(provider, type);\n    }\n\n    FacebookAuth(type) {\n      const provider = new firebase.auth.FacebookAuthProvider();\n      return this.AuthLogin(provider, type);\n    }\n\n    SignOut() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this.fireAuth.signOut().then(() => {\n          localStorage.removeItem('user');\n        });\n      })();\n    }\n\n    SetUserData(user) {\n      this.db.database.ref('users').child(user.username).set({\n        email: user.email,\n        username: user.username,\n        password: user.password,\n        dob: user.dob,\n        phoneno: user.phoneno,\n        currency: user.currency\n      });\n    }\n\n    SignUp(userData) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const result = yield _this2.fireAuth.createUserWithEmailAndPassword(userData.email, userData.password);\n\n          if (result.user) {\n            userData.firebaseId = result.user.uid;\n\n            _this2.loginService.register(userData).subscribe(resp => {\n              if (resp.errorCode === 0) {\n                _this2.SendVerificationMail();\n\n                if (_this2.isAffiliate && _this2.tokenService.getClickID() != null && _this2.tokenService.getClickID() != 'undefined') {\n                  let affData = {\n                    user_id: resp.result[0].userId,\n                    click_id: _this2.tokenService.getClickID(),\n                    aff_id: _this2.tokenService.getAffId(),\n                    offer_id: _this2.tokenService.getOfferId(),\n                    siteName: _this2.siteName\n                  };\n\n                  _this2.sendAffData(affData);\n                }\n              } else {\n                _this2.toastr.error(resp.errorDescription);\n\n                _this2.SignOut();\n              }\n\n              $('#login_loading').css('display', 'none');\n            }, err => {\n              $('#login_loading').css('display', 'none');\n            });\n          }\n        } catch (e) {\n          if (e.code == 'auth/account-exists-with-different-credential' || e.code == 'auth/email-already-in-use') {\n            _this2.toastr.error(\"Email already in use by another account\");\n\n            $('#login_loading').css('display', 'none');\n          }\n        }\n      })();\n    }\n\n    SignInWithEmail(userData, type) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const result = yield _this3.fireAuth.signInWithEmailAndPassword(userData.userName, userData.password);\n\n          if (result.user) {\n            if (result.user.emailVerified) {\n              _this3.loginService.login(userData).subscribe(resp => {\n                if (resp.errorCode === 0) {\n                  _this3.tokenService.setToken(resp.result[0].token);\n\n                  _this3.tokenService.setUserInfo(resp.result[0]); // this.router.navigate(['highlight']);\n                  // window.location.href = \"home\";\n\n\n                  window.location.href = window.location.origin + window.location.pathname;\n                } else {\n                  if (!resp.errorDescription) {\n                    resp.errorDescription = \"Username or password is wrong\";\n                  }\n\n                  _this3.SignOut();\n\n                  _this3.toastr.error(resp.errorDescription);\n                }\n\n                $('#login_loading').css('display', 'none');\n              });\n            } else {\n              $('#login_loading').css('display', 'none');\n\n              _this3.toastr.error(\"Email Address is not Verified\");\n\n              _this3.SignOut();\n            }\n          }\n        } catch (e) {\n          if (e.code == 'auth/user-not-found') {\n            _this3.toastr.error(\"User Not Found\");\n          }\n\n          if (e.code == 'auth/wrong-password') {\n            _this3.toastr.error(\"Invalid Password\");\n          }\n        }\n      })();\n    }\n\n    SendVerificationMail() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this4.fireAuth.currentUser.then(user => {\n          return user.sendEmailVerification();\n        }).then(() => {\n          _this4.router.navigate(['/highlight']).then(() => {\n            $('#verifyEmail').css('display', 'block');\n          });\n        });\n      })();\n    }\n\n    AuthLogin(provider, type) {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const result = yield _this5.fireAuth.signInWithPopup(provider);\n          provider.addScope('https://www.googleapis.com/auth/user.birthday.read');\n\n          if (type == 0) {\n            _this5.RegisterWithSocial(result.user, 0, _this5.b2cID);\n          } else {\n            _this5.Login(result.user);\n          }\n        } catch (e) {\n          if (e.code == 'auth/account-exists-with-different-credential') {\n            var email = e.email;\n            var pendingCredential = e.credential;\n\n            _this5.fireAuth.fetchSignInMethodsForEmail(email).then(methods => {\n              if (methods[0] === 'password') {\n                // var password = promptUserForPassword(); // TODO: implement promptUserForPassword.\n                _this5.fireAuth.signInWithEmailAndPassword(email, 'password').then(result_2 => {\n                  // Step 4a.\n                  result_2.user.linkWithCredential(pendingCredential);\n\n                  _this5.Login(result_2.user);\n                });\n\n                return;\n              }\n\n              if (methods[0] === 'google.com') {\n                _this5.toastr.error('You already have an account with the selected email address.');\n\n                _this5.fireAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider()).then(result => {\n                  result.user.linkAndRetrieveDataWithCredential(pendingCredential);\n\n                  _this5.Login(result.user);\n                });\n\n                return;\n              }\n\n              if (methods[0] === 'facebook.com') {\n                _this5.toastr.error('You already have an account with the selected email address.');\n\n                _this5.fireAuth.signInWithPopup(new firebase.auth.FacebookAuthProvider()).then(result => {\n                  result.user.linkAndRetrieveDataWithCredential(pendingCredential);\n\n                  _this5.Login(result.user);\n                });\n\n                return;\n              }\n            });\n          }\n        }\n      })();\n    }\n\n    sendAffData(affData) {\n      this.loginService.addAffUser(affData).subscribe(resp => {\n        if (resp.status != 'Success') {\n          this.sendAffData(affData);\n        }\n      });\n    }\n\n    RegisterWithSocial(user, type, b2cID) {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        let userData = {\n          firstName: user.displayName != null ? user.displayName.split(' ')[0] : \"\",\n          lastName: user.displayName != null ? user.displayName.split(' ')[1] : \"\",\n          userName: \"\",\n          password: \"\",\n          currencyCode: environment.currency,\n          email: user.email != null ? user.email : \"\",\n          b2cID: b2cID,\n          phoneNumber: user.phoneNumber == null ? \"\" : user.phoneNumber,\n          address: \"\",\n          birthDate: user.birthDate != null ? user.birthDate : \"\",\n          firebaseId: user.uid,\n          blocChain: \"\",\n          domain: environment.origin,\n          isb2c: 1\n        };\n        console.log(userData);\n\n        _this6.loginService.register(userData).subscribe(resp => {\n          console.log(resp); // if (resp.errorCode === 0) {\n          //  if(type==0){\n          //   if(user.email!=null||user.email==\"\"){\n          //     let data={\"email\":user.email,\"siteName\":environment.siteName,\"domain\":environment.domain}\n          //     this.loginService.sendWelcomeMail(data).subscribe((resp:any)=>{console.log(resp.status)});\n          //   }\n          //   this.toastr.success('Registered Successfully');\n          //   this.tokenService.setToken(resp.result[0].token);\n          //   this.tokenService.setUserInfo(resp.result[0]);\n          //   window.location.href = window.location.origin + window.location.pathname;\n          //  }\n          // } else {\n          //   this.SignOut()\n          //   this.toastr.error(resp.errorDescription);\n          // }\n\n          if (resp.errorCode === 0) {\n            if (_this6.isAffiliate && _this6.tokenService.getClickID() != null && _this6.tokenService.getClickID() != 'undefined') {\n              let affData = {\n                user_id: resp.result[0].userId,\n                click_id: _this6.tokenService.getClickID(),\n                aff_id: _this6.tokenService.getAffId(),\n                offer_id: _this6.tokenService.getOfferId(),\n                siteName: _this6.siteName\n              };\n\n              _this6.sendAffData(affData);\n            } else {\n              if (type == 0) {\n                if (user.email != null || user.email == \"\") {\n                  let data = {\n                    \"email\": user.email,\n                    \"siteName\": environment.siteName,\n                    \"domain\": environment.domain\n                  };\n\n                  _this6.loginService.sendWelcomeMail(data).subscribe(resp => {\n                    console.log(resp.status);\n                  });\n                }\n\n                _this6.toastr.success('Registered Successfully');\n\n                _this6.tokenService.setToken(resp.result[0].token);\n\n                _this6.tokenService.setUserInfo(resp.result[0]);\n\n                window.location.href = window.location.origin + window.location.pathname;\n              }\n            }\n          } else {\n            _this6.SignOut();\n\n            _this6.toastr.error(resp.errorDescription);\n          }\n\n          $('#login_loading').css('display', 'none');\n        }, err => {\n          _this6.SignOut();\n\n          console.log(err);\n        });\n      })();\n    }\n\n    Login(user) {\n      let body = {\n        userName: user.username != null ? user.username : \"\",\n        password: user.password != null ? user.password : \"\",\n        firebaseId: user.uid,\n        captcha: '0000',\n        log: '0000',\n        origin: environment.origin\n      };\n      this.recaptchaV3Service.execute('importantAction').subscribe(token => {\n        if (token != null || token != \"\") {\n          this.loginService.login(body).subscribe(resp => {\n            if (resp.errorCode === 0) {\n              this.toastr.success(\"Login Successfully\");\n              this.tokenService.setToken(resp.result[0].token);\n              this.tokenService.setUserInfo(resp.result[0]);\n              window.location.href = window.location.origin + window.location.pathname;\n              $('#login_loading').css('display', 'none');\n            } else {\n              if (resp.errorDescription === \"User Not Found.\" || resp.errorDescription === \"invalid username/password6\") {\n                this.RegisterWithSocial(user, 0, this.b2cID);\n              }\n            }\n          }, err => {\n            this.SignOut();\n            console.log(err);\n          });\n        }\n      });\n    }\n\n    phoneLogin(phoneNumber, appVerifier) {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        _this7.fireAuth.signInWithPhoneNumber(phoneNumber, appVerifier).then(result => {\n          console.log(result.confirm);\n\n          if (result.confirm) {\n            _this7.toastr.success('OTP has been sent. Please check your phone.');\n\n            $('#login_loading').css('display', 'none');\n            _this7.confirmationResult = result;\n          }\n        }).catch(error => console.log(error));\n      })();\n    }\n\n    otpSubmit(code, type, pass, dob, b2cID) {\n      var _this8 = this;\n\n      return _asyncToGenerator(function* () {\n        _this8.confirmationResult.confirm(code).then( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (result) {\n            if (type == 0) {\n              let userData = {\n                firstName: result.user.displayName != null ? result.user.displayName.split(' ')[0] : \"\",\n                lastName: result.user.displayName != null ? result.user.displayName.split(' ')[1] : \"\",\n                userName: \"\",\n                password: type == 0 ? pass : \"\",\n                currencyCode: environment.currency,\n                email: \"\",\n                b2cID: b2cID,\n                phoneNumber: result.user.phoneNumber == null ? \"\" : result.user.phoneNumber,\n                address: \"\",\n                birthDate: type == 0 ? dob : result.user.birthDate != null ? result.user.birthDate : \"\",\n                firebaseId: result.user.uid,\n                blocChain: \"\",\n                domain: environment.origin,\n                isb2c: 1\n              };\n              console.log(userData);\n\n              _this8.loginService.register(userData).subscribe(resp => {\n                console.log(resp); // if (resp.errorCode === 0) {\n                //  if(type==0){\n                //   this.toastr.success('Registered Successfully');\n                //   this.tokenService.setToken(resp.result[0].token);\n                //   this.tokenService.setUserInfo(resp.result[0]);\n                //   window.location.href = window.location.origin + window.location.pathname;\n                //  }\n                // } else {\n                //   this.SignOut()\n                //   this.toastr.error(resp.errorDescription);\n                // }\n\n                if (resp.errorCode === 0) {\n                  if (_this8.isAffiliate && _this8.tokenService.getClickID() != null && _this8.tokenService.getClickID() != 'undefined') {\n                    let affData = {\n                      user_id: resp.result[0].userId,\n                      click_id: _this8.tokenService.getClickID(),\n                      aff_id: _this8.tokenService.getAffId(),\n                      offer_id: _this8.tokenService.getOfferId(),\n                      siteName: _this8.siteName\n                    };\n\n                    _this8.sendAffData(affData);\n                  } else {\n                    if (type == 0) {\n                      _this8.toastr.success('Registered Successfully');\n\n                      _this8.tokenService.setToken(resp.result[0].token);\n\n                      _this8.tokenService.setUserInfo(resp.result[0]);\n\n                      window.location.href = window.location.origin + window.location.pathname;\n                    }\n                  }\n\n                  console.log(_this8.tokenService.getClickID());\n                } else {\n                  _this8.SignOut();\n\n                  _this8.toastr.error(resp.errorDescription);\n                }\n\n                $('#login_loading').css('display', 'none');\n              }, err => {\n                _this8.SignOut();\n\n                console.log(err);\n              });\n            } else {\n              _this8.Login(result.user);\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()).catch(error => {\n          _this8.toastr.error('Something Went Wrong');\n\n          $('#login_loading').css('display', 'none');\n          console.log(error);\n        });\n      })();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ReCaptchaV3Service), i0.ɵɵinject(i4.AngularFireAuth), i0.ɵɵinject(i5.TokenService), i0.ɵɵinject(i6.ToastrService), i0.ɵɵinject(i7.AngularFireDatabase), i0.ɵɵinject(i8.LoginService), i0.ɵɵinject(i9.ClientApiService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}