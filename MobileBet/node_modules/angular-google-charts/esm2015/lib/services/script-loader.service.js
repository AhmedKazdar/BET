import { Inject, Injectable, LOCALE_ID, NgZone } from '@angular/core';
import { Observable, of, Subject } from 'rxjs';
import { map, mergeMap, switchMap } from 'rxjs/operators';
import { getDefaultConfig } from '../helpers/chart.helper';
import { GOOGLE_CHARTS_LAZY_CONFIG } from '../types/google-charts-config';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class ScriptLoaderService {
    constructor(zone, localeId, config$) {
        this.zone = zone;
        this.localeId = localeId;
        this.config$ = config$;
        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
        this.scriptLoadSubject = new Subject();
    }
    /**
     * Checks whether `google.charts` is available.
     *
     * If not, it can be loaded by calling `loadChartPackages`.
     *
     * @returns `true` if `google.charts` is available, `false` otherwise.
     */
    isGoogleChartsAvailable() {
        if (typeof google === 'undefined' || typeof google.charts === 'undefined') {
            return false;
        }
        return true;
    }
    /**
     * Loads the Google Chart script and the provided chart packages.
     * Can be called multiple times to load more packages.
     *
     * When called without any arguments, this will just load the default package
     * containing the namespaces `google.charts` and `google.visualization` without any charts.
     *
     * @param packages The packages to load.
     * @returns A stream emitting as soon as the chart packages are loaded.
     */
    loadChartPackages(...packages) {
        return this.loadGoogleCharts().pipe(mergeMap(() => this.config$), map(config => {
            return Object.assign(Object.assign({}, getDefaultConfig()), (config || {}));
        }), switchMap((googleChartsConfig) => {
            return new Observable(observer => {
                const config = {
                    packages,
                    language: this.localeId,
                    mapsApiKey: googleChartsConfig.mapsApiKey,
                    safeMode: googleChartsConfig.safeMode
                };
                google.charts.load(googleChartsConfig.version, config);
                google.charts.setOnLoadCallback(() => {
                    this.zone.run(() => {
                        observer.next();
                        observer.complete();
                    });
                });
            });
        }));
    }
    /**
     * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.
     *
     * @returns A stream emitting as soon as loading has completed.
     * If the google charts script is already loaded, the stream emits immediately.
     */
    loadGoogleCharts() {
        if (this.isGoogleChartsAvailable()) {
            return of(undefined);
        }
        else if (!this.isLoadingGoogleCharts()) {
            const script = this.createGoogleChartsScript();
            script.onload = () => {
                this.zone.run(() => {
                    this.scriptLoadSubject.next();
                    this.scriptLoadSubject.complete();
                });
            };
            script.onerror = () => {
                this.zone.run(() => {
                    console.error('Failed to load the google charts script!');
                    this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));
                });
            };
        }
        return this.scriptLoadSubject.asObservable();
    }
    isLoadingGoogleCharts() {
        return this.getGoogleChartsScript() != null;
    }
    getGoogleChartsScript() {
        const pageScripts = Array.from(document.getElementsByTagName('script'));
        return pageScripts.find(script => script.src === this.scriptSource);
    }
    createGoogleChartsScript() {
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.scriptSource;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        return script;
    }
}
ScriptLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScriptLoaderService, deps: [{ token: i0.NgZone }, { token: LOCALE_ID }, { token: GOOGLE_CHARTS_LAZY_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
ScriptLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScriptLoaderService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScriptLoaderService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [GOOGLE_CHARTS_LAZY_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,