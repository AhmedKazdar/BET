/// <reference path="./types.ts" />
import { Subject } from 'rxjs';
export class ChartEditorRef {
    constructor(editor) {
        this.editor = editor;
        this.doneSubject = new Subject();
        this.addEventListeners();
    }
    /**
     * Gets an observable that is notified when the dialog is saved.
     * Emits either the result if the dialog was saved or `null` if editing was cancelled.
     */
    afterClosed() {
        return this.doneSubject.asObservable();
    }
    /**
     * Stops editing the chart and closes the dialog.
     */
    cancel() {
        this.editor.closeDialog();
    }
    addEventListeners() {
        google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {
            google.visualization.events.removeAllListeners(this.editor);
            const updatedChartWrapper = this.editor.getChartWrapper();
            this.doneSubject.next(updatedChartWrapper);
            this.doneSubject.complete();
        });
        google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {
            google.visualization.events.removeAllListeners(this.editor);
            this.doneSubject.next(null);
            this.doneSubject.complete();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtZWRpdG9yLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItZ29vZ2xlLWNoYXJ0cy9zcmMvbGliL2NvbXBvbmVudHMvY2hhcnQtZWRpdG9yL2NoYXJ0LWVkaXRvci1yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBRW5DLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFJM0MsTUFBTSxPQUFPLGNBQWM7SUFHekIsWUFBNkIsTUFBd0M7UUFBeEMsV0FBTSxHQUFOLE1BQU0sQ0FBa0M7UUFGcEQsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBbUIsQ0FBQztRQUc1RCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTTtRQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7WUFDckUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRTVELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUUxRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDekUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRTVELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90eXBlcy50c1wiIC8+XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgRWRpdENoYXJ0UmVzdWx0ID0gZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRXcmFwcGVyIHwgbnVsbDtcblxuZXhwb3J0IGNsYXNzIENoYXJ0RWRpdG9yUmVmIHtcbiAgcHJpdmF0ZSByZWFkb25seSBkb25lU3ViamVjdCA9IG5ldyBTdWJqZWN0PEVkaXRDaGFydFJlc3VsdD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVkaXRvcjogZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3IpIHtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBvYnNlcnZhYmxlIHRoYXQgaXMgbm90aWZpZWQgd2hlbiB0aGUgZGlhbG9nIGlzIHNhdmVkLlxuICAgKiBFbWl0cyBlaXRoZXIgdGhlIHJlc3VsdCBpZiB0aGUgZGlhbG9nIHdhcyBzYXZlZCBvciBgbnVsbGAgaWYgZWRpdGluZyB3YXMgY2FuY2VsbGVkLlxuICAgKi9cbiAgcHVibGljIGFmdGVyQ2xvc2VkKCk6IE9ic2VydmFibGU8RWRpdENoYXJ0UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuZG9uZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgZWRpdGluZyB0aGUgY2hhcnQgYW5kIGNsb3NlcyB0aGUgZGlhbG9nLlxuICAgKi9cbiAgcHVibGljIGNhbmNlbCgpIHtcbiAgICB0aGlzLmVkaXRvci5jbG9zZURpYWxvZygpO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMuYWRkT25lVGltZUxpc3RlbmVyKHRoaXMuZWRpdG9yLCAnb2snLCAoKSA9PiB7XG4gICAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMucmVtb3ZlQWxsTGlzdGVuZXJzKHRoaXMuZWRpdG9yKTtcblxuICAgICAgY29uc3QgdXBkYXRlZENoYXJ0V3JhcHBlciA9IHRoaXMuZWRpdG9yLmdldENoYXJ0V3JhcHBlcigpO1xuXG4gICAgICB0aGlzLmRvbmVTdWJqZWN0Lm5leHQodXBkYXRlZENoYXJ0V3JhcHBlcik7XG4gICAgICB0aGlzLmRvbmVTdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgfSk7XG5cbiAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMuYWRkT25lVGltZUxpc3RlbmVyKHRoaXMuZWRpdG9yLCAnY2FuY2VsJywgKCkgPT4ge1xuICAgICAgZ29vZ2xlLnZpc3VhbGl6YXRpb24uZXZlbnRzLnJlbW92ZUFsbExpc3RlbmVycyh0aGlzLmVkaXRvcik7XG5cbiAgICAgIHRoaXMuZG9uZVN1YmplY3QubmV4dChudWxsKTtcbiAgICAgIHRoaXMuZG9uZVN1YmplY3QuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxufVxuIl19