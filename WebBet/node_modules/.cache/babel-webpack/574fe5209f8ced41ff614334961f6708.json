{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let NumberOnlyDirective = /*#__PURE__*/(() => {\n  class NumberOnlyDirective {\n    /**\r\n     * Class constructor\r\n     * @param hostElement\r\n     */\n    constructor(hostElement) {\n      this.hostElement = hostElement;\n      this.allowDecimals = true;\n      this.allowSign = false;\n      this.decimalSeparator = '.';\n      this.allowNull = true;\n      this.previousValue = ''; // --------------------------------------\n      //  Regular expressions\n\n      this.integerUnsigned = '^[0-9]*$';\n      this.integerSigned = '^-?[0-9]+$';\n      this.decimalUnsigned = '^[0-9]+(.[0-9]+)?$';\n      this.decimalSigned = '^-?[0-9]+(.[0-9]+)?$';\n    }\n    /**\r\n     * Event handler for host's change event\r\n     * @param e\r\n     */\n\n\n    onChange(e) {\n      this.validateValue(this.hostElement.nativeElement.value);\n    }\n    /**\r\n     * Event handler for host's paste event\r\n     * @param e\r\n     */\n\n\n    onPaste(e) {\n      // get and validate data from clipboard\n      let value = e.clipboardData.getData('text/plain');\n      this.validateValue(value);\n      e.preventDefault();\n    }\n    /**\r\n     * Event handler for host's keydown event\r\n     * @param event\r\n     */\n\n\n    onKeyDown(e) {\n      let cursorPosition = e.target['selectionStart'];\n      let originalValue = e.target['value'];\n      let key = this.getName(e);\n      let controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n      let signExists = originalValue.includes('-');\n      let separatorExists = originalValue.includes(this.decimalSeparator); // allowed keys apart from numeric characters\n\n      let allowedKeys = ['Backspace', 'ArrowLeft', 'ArrowRight', 'Escape', 'Tab']; // when decimals are allowed, add\n      // decimal separator to allowed codes when\n      // its position is not close to the the sign (-. and .-)\n\n      let separatorIsCloseToSign = signExists && cursorPosition <= 1;\n\n      if (this.allowDecimals && !separatorIsCloseToSign && !separatorExists) {\n        if (this.decimalSeparator == '.') allowedKeys.push('.');else allowedKeys.push(',');\n      } // when minus sign is allowed, add its\n      // key to allowed key only when the\n      // cursor is in the first position, and\n      // first character is different from\n      // decimal separator\n\n\n      let firstCharacterIsSeparator = originalValue.charAt(0) != this.decimalSeparator;\n\n      if (this.allowSign && !signExists && firstCharacterIsSeparator && cursorPosition == 0) {\n        allowedKeys.push('-');\n      } // allow some non-numeric characters\n\n\n      if (allowedKeys.indexOf(key) != -1 || // Allow: Ctrl+A and Command+A\n      key == 'a' && controlOrCommand || // Allow: Ctrl+C and Command+C\n      key == 'c' && controlOrCommand || // Allow: Ctrl+V and Command+V\n      key == 'v' && controlOrCommand || // Allow: Ctrl+X and Command+X\n      key == 'x' && controlOrCommand) {\n        // let it happen, don't do anything\n        return;\n      } // save value before keydown event\n\n\n      this.previousValue = originalValue; // allow number characters only\n\n      let isNumber = new RegExp(this.integerUnsigned).test(key);\n      if (isNumber) return;else e.preventDefault();\n    }\n    /**\r\n     * Test whether value is a valid number or not\r\n     * @param value\r\n     */\n\n\n    validateValue(value) {\n      // choose the appropiate regular expression\n      let regex;\n      if (!this.allowDecimals && !this.allowSign) regex = this.integerUnsigned;\n      if (!this.allowDecimals && this.allowSign) regex = this.integerSigned;\n      if (this.allowDecimals && !this.allowSign) regex = this.decimalUnsigned;\n      if (this.allowDecimals && this.allowSign) regex = this.decimalSigned; // when a numbers begins with a decimal separator,\n      // fix it adding a zero in the beginning\n\n      let firstCharacter = value.charAt(0);\n      if (firstCharacter == this.decimalSeparator) value = 0 + value; // when a numbers ends with a decimal separator,\n      // fix it adding a zero in the end\n\n      let lastCharacter = value.charAt(value.length - 1);\n      if (lastCharacter == this.decimalSeparator) value = value + 0; // test number with regular expression, when\n      // number is invalid, replace it with a zero\n\n      let valid = new RegExp(regex).test(value);\n      this.hostElement.nativeElement['value'] = valid ? value : 0;\n    }\n    /**\r\n     * Get key's name\r\n     * @param e\r\n     */\n\n\n    getName(e) {\n      if (e.key) {\n        return e.key;\n      } else {\n        // for old browsers\n        if (e.keyCode && String.fromCharCode) {\n          switch (e.keyCode) {\n            case 8:\n              return 'Backspace';\n\n            case 9:\n              return 'Tab';\n\n            case 27:\n              return 'Escape';\n\n            case 37:\n              return 'ArrowLeft';\n\n            case 39:\n              return 'ArrowRight';\n\n            case 188:\n              return ',';\n\n            case 190:\n              return '.';\n\n            case 109:\n              return '-';\n            // minus in numbpad\n\n            case 173:\n              return '-';\n            // minus in alphabet keyboard in firefox\n\n            case 189:\n              return '-';\n            // minus in alphabet keyboard in chrome\n\n            default:\n              return String.fromCharCode(e.keyCode);\n          }\n        }\n      }\n    }\n\n  }\n\n  NumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) {\n    return new (t || NumberOnlyDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  NumberOnlyDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: NumberOnlyDirective,\n    selectors: [[\"\", \"numberOnly\", \"\"]],\n    hostBindings: function NumberOnlyDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function NumberOnlyDirective_change_HostBindingHandler($event) {\n          return ctx.onChange($event);\n        })(\"paste\", function NumberOnlyDirective_paste_HostBindingHandler($event) {\n          return ctx.onPaste($event);\n        })(\"keydown\", function NumberOnlyDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      allowDecimals: \"allowDecimals\",\n      allowSign: \"allowSign\",\n      decimalSeparator: \"decimalSeparator\",\n      allowNull: \"allowNull\"\n    }\n  });\n  return NumberOnlyDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}