{"ast":null,"code":"import { interval, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token.service\";\nimport * as i2 from \"./share-data.service\";\nimport * as i3 from \"./main.service\";\nimport * as i4 from \"./sports-api.service\";\nexport let MultimarketSocketService = /*#__PURE__*/(() => {\n  class MultimarketSocketService {\n    constructor(tokenService, shareService, main, sportApi) {\n      this.tokenService = tokenService;\n      this.shareService = shareService;\n      this.main = main;\n      this.sportApi = sportApi; // oddsSocketUrl = environment.oddsSocketUrl;\n      // racingSocketApi = environment.racingSocketApi;\n\n      this.siteName = environment.siteName;\n      this.socketTimeOut = false;\n      this.marketIds = '';\n      this.isVir = false;\n      this.isKabaddi = false;\n      this.inPlay$ = new Subject();\n      this.matchData = [];\n      this.isLogin = false;\n      this.isOddsPendingApi = false;\n      this.isFancyPendingApi = false;\n\n      if (this.tokenService.getToken()) {\n        this.isLogin = true;\n      }\n\n      if (this.isLogin) {\n        this.inPlay$.subscribe(inPlay => {\n          this.startOddsInterval(inPlay == 1 ? 1000 : 3000);\n        });\n      } else {\n        this.inPlay$.subscribe(inPlay => {\n          this.startOddsInterval(inPlay == 1 ? 10000 : 30000);\n        });\n      }\n\n      this.main.apis2$.subscribe(res => {\n        if (res) {\n          this.oddsSocketUrl = res.sportSocketApi;\n          this.racingSocketApi = res.racingSocketApi;\n          this.fSource = res.fSource;\n        }\n      });\n    }\n\n    getFSource() {\n      return this.fSource;\n    }\n\n    startOddsInterval(intervalTime) {\n      if (this.intervalSub) {\n        this.intervalSub.unsubscribe();\n      }\n\n      if (this.matchData) {\n        this.matchData.forEach(match => {\n          this.getAllApiData(match);\n        });\n      } // console.log(this.matchData)\n\n\n      this.intervalSub = interval(intervalTime).subscribe(() => {\n        if (!this.socketTimeOut && this.matchData) {\n          this.matchData.forEach(match => {\n            this.getAllApiData(match);\n          });\n        }\n      });\n    }\n\n    getAllApiData(match) {\n      if (!match.isMulti) {\n        return;\n      } // let ids = \"\";\n\n\n      let ids = [];\n\n      if (match.markets) {\n        match.markets.forEach(market => {\n          if (market.isMulti) {\n            if (!market.MarketId) {\n              market['MarketId'] = market.marketId;\n            } else {\n              market['marketId'] = market.MarketId;\n            }\n\n            ids.push(market.marketId);\n          }\n        }); // ids = match.markets.reduce((acc, c) => [...acc, c.marketId && c.isMulti ? c.marketId : c.MarketId], []);\n      }\n\n      if (!match.isVir && !match.isKabaddi && ids.length > 0) {\n        // if (this.isOddsPendingApi) {\n        //     return;\n        // }\n        // this.isOddsPendingApi = true;\n        this.sportApi.getOddsInplay(ids.toString()).subscribe(data => {\n          match['oddsData'] = data;\n          this.shareService.shareOddsData(match); // this.isOddsPendingApi = false;\n        }, err => {// this.isOddsPendingApi = false;\n        });\n      }\n\n      if ((match.eventTypeId == 4 || match.isKabaddi) && (match.isBmMulti || match.isFancyMulti)) {\n        // if (this.isFancyPendingApi) {\n        //     return;\n        // }\n        // this.isFancyPendingApi = true;\n        let fSource;\n\n        if (this.matchData.eventTypeId != 4 || this.isVir) {\n          fSource = '0';\n        } else {\n          fSource = this.fSource;\n        }\n\n        this.sportApi.getBmFancy(match.eventId, fSource).subscribe(data => {\n          if (data.Fancymarket && match.isFancyMulti) {\n            match['Fancymarket'] = data.Fancymarket;\n          }\n\n          if (data.BMmarket && match.isBmMulti) {\n            match['BMmarket'] = data.BMmarket;\n          }\n\n          this.shareService.shareOddsData(match); // this.isFancyPendingApi = false;\n        }, err => {// this.isFancyPendingApi = false;\n        });\n      }\n\n      if ((match.eventTypeId == 4 || match.eventTypeId == 1 || match.eventTypeId == 2) && match.isPreMulti && this.isLogin && !match.isVir && this.siteName != 'betswiz') {\n        //   if (this.isSportBookPendingApi) {\n        //     return;\n        //   }\n        //   this.isSportBookPendingApi = true;\n        this.sportApi.getSportsBook(match.eventId).subscribe(data => {\n          if (!data.data && !data.sportsBookMarket) {\n            match['sportsBookMarket'] = [];\n          } else {\n            match['sportsBookMarket'] = data.sportsBookMarket;\n          }\n\n          if (match.sportsBookMarket.length > 0) {\n            let isSbMulti = false;\n            match.sportsBookMarket.forEach(sbMarket => {\n              let favArray = localStorage.getItem('favourite');\n              let favArrays = [];\n\n              if (favArray) {\n                favArrays = favArray.split(',');\n              }\n\n              let sbIndex = _.indexOf(favArrays, 'premium_' + match.eventId + '_' + sbMarket.id);\n\n              if (sbIndex > -1) {\n                sbMarket['isMulti'] = true;\n                isSbMulti = true;\n              } else {\n                sbMarket['isMulti'] = false;\n              }\n            });\n            match.isPreMulti = isSbMulti;\n          }\n\n          this.shareService.shareOddsData(match); // this.isSportBookPendingApi = false;\n        }, err => {// this.isSportBookPendingApi = false;\n        });\n      }\n    }\n\n    getWebSocketData(matches) {\n      this.matchData = matches;\n\n      if (this.isLogin) {\n        this.startOddsInterval(1500);\n      } else {\n        this.startOddsInterval(10000);\n      }\n    }\n\n    createConnection(url) {\n      return new WebSocket(url);\n    }\n\n    closeConnection() {\n      this.shareService.shareOddsData(null);\n\n      if (this.subject$ && this.subject$.OPEN) {\n        this.subject$.close();\n        this.shareService.shareOddsData(null);\n        this.matchId = null;\n      }\n\n      if (this.intervalSub) {\n        this.intervalSub.unsubscribe();\n      }\n    }\n\n  }\n\n  MultimarketSocketService.ɵfac = function MultimarketSocketService_Factory(t) {\n    return new (t || MultimarketSocketService)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.ShareDataService), i0.ɵɵinject(i3.MainService), i0.ɵɵinject(i4.SportsApiService));\n  };\n\n  MultimarketSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MultimarketSocketService,\n    factory: MultimarketSocketService.ɵfac,\n    providedIn: 'root'\n  });\n  return MultimarketSocketService;\n})();","map":null,"metadata":{},"sourceType":"module"}